using System;
using System.Collections;
using System.Collections.Generic;
using System.ComponentModel;
using System.Configuration;
using System.Data;
using System.Data.Entity;
//using System.Data.Entity.Core.Common.;
using System.Data.Entity.Core.Objects;
//using System.Data.Objects; 
//using System.Data.Entity.Core.EntityClient;
//Objects.SqlClient;
//using System.DaSqlClient;
using System.Data.Entity.Validation;
using System.Diagnostics;
using System.Drawing;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Net;
using System.Text;
using System.Text.RegularExpressions;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Xml;
using HtmlAgilityPack;
using EntityState = System.Data.EntityState;
using HtmlDocument = System.Windows.Forms.HtmlDocument;

namespace WindowsFormsApplication1
{
    public partial class Form1 : Form
    {
        private const char Delimiter = ';';
        private const char CSVDelimeter = ',';
        private static string _currentConnection ;
        public Form1()
        {
            InitializeComponent();
            var connection = System.Configuration.ConfigurationManager.ConnectionStrings;
            for (int i = 0; i < connection.Count; i++)
            {

                if (connection[i].ProviderName != "")
                {
                    comboBoxEnviroment.Items.Add(connection[i].Name);
                    if (connection[i].Name == "EXANTE_Entities")
                    {
                        comboBoxEnviroment.Text = "EXANTE_Entities";
                    }
                }
            }
            _currentConnection = comboBoxEnviroment.Text;

        }

        private void TradesParser_Click(object sender, EventArgs e)
        {
            DialogResult result = openFileDialog2.ShowDialog();
            if (result == DialogResult.OK) // Test result.
            {
                var reportdate = new DateTime(2013, 04, 24);
                var testexample = new EXANTE_Entities(_currentConnection);
                var reader = new StreamReader(openFileDialog2.FileName);
                var allfromFile = new List<Ctrade>();

                const int GMToffset = 4; //gmt offset from BO
                const int nextdaystarthour = 19; //start new day for FORTS
                const string template = "FORTS";
                var nextdayvalueform = Fortsnextday.Value;
                var lineFromFile = reader.ReadLine();
                TradesParserStatus.Text = "Processing";
                DateTime TimeStart = DateTime.Now;
                LogTextBox.AppendText(TimeStart.ToLongTimeString() + ": " + "start BO trades uploading");

                if (lineFromFile != null)
                {
                    var rowstring = lineFromFile.Split(Delimiter);
                    int idDate = 0,
                        idSymbol = 0,
                        idAccount = 0,
                        idqty = 0,
                        idprice = 0,
                        idside = 0,
                        idfees = 0,
                        iduser = 0,
                        idcurrency = 0,
                        idorderid = 0,
                        idbrokerTimeDelta = 0,
                        idexchangeOrderId = 0,
                        idcontractMultiplier = 0,
                        idtradeNumber = 0,
                        idcounterparty = 0,
                        idgateway = 0,
                        idtradeType = 0,
                        idvalueDate = 0;
                    for (var i = 0; i < rowstring.Length; i++)
                    {
                        switch (rowstring[i])
                        {
                            case "gwTime":
                                idDate = i;
                                break;
                            case "symbolId":
                                idSymbol = i;
                                break;
                            case "accountId":
                                idAccount = i;
                                break;
                            case "quantity":
                                idqty = i;
                                break;
                            case "price":
                                idprice = i;
                                break;
                            case "side":
                                idside = i;
                                break;
                            case "commission":
                                idfees = i;
                                break;
                            case "userId":
                                iduser = i;
                                break;
                            case "currency":
                                idcurrency = i;
                                break;
                            case "tradeNumber":
                                idtradeNumber = i;
                                break;
                            case "orderId":
                                idorderid = i;
                                break;
                            case "brokerTimeDelta":
                                idbrokerTimeDelta = i;
                                break;
                            case "exchangeOrderId":
                                idexchangeOrderId = i;
                                break;
                            case "contractMultiplier":
                                idcontractMultiplier = i;
                                break;
                            case "executionCounterparty":
                                idcounterparty = i;
                                break;
                            case "gatewayId":
                                idgateway = i;
                                break;
                            case "valueDate":
                                idvalueDate = i;
                                break;
                            case "tradeType":
                                idtradeType = i;
                                break;

                            default:
                                Console.WriteLine("Additional fields in the tr.file!");
                                break;
                        }
                    }
                    var index = 1;
                    var stringindex = Convert.ToString(reportdate.Year);
                    if (reportdate.Month < 10) stringindex = string.Concat(stringindex, "0");
                    stringindex = string.Concat(stringindex, Convert.ToString(reportdate.Month));
                    if (reportdate.Day < 10) stringindex = string.Concat(stringindex, "0");
                    stringindex = string.Concat(stringindex, Convert.ToString(reportdate.Day));
                    var initialindex = Convert.ToInt64(stringindex);
                    var contractrow =
                        from ct in testexample.Contracts
                        where ct.valid == 1
                        select ct;
                    var contractdetails = contractrow.ToDictionary(k => k.id, k => k.ValueDate);
                    while (!reader.EndOfStream)
                    {
                        lineFromFile = reader.ReadLine();
                        if (lineFromFile == null) continue;
                        rowstring = lineFromFile.Split(Delimiter);
                        DateTime? valuedate;
                        if (!contractdetails.TryGetValue(rowstring[idSymbol], out valuedate))
                        {
                            valuedate = new DateTime(2011, 01, 01);
                            //todo fill correct value date from file
                            var test = new Contract
                                {
                                    id = rowstring[idSymbol],
                                    Contract1 = rowstring[idSymbol],
                                    Exchange = "Needtoupdate",
                                    Type = "Needtoupdate",
                                    Leverage =
                                        (idcontractMultiplier > (rowstring.Length - 1)) ||
                                        (rowstring[idcontractMultiplier] == "")
                                            ? 1
                                            : double.Parse(rowstring[idcontractMultiplier], CultureInfo.InvariantCulture),
                                    ValueDate = valuedate, //Convert.ToDateTime(rowstring[idvalueDate]),
                                    Currency =
                                        idcontractMultiplier > (rowstring.Length - 1)
                                            ? "USD"
                                            : rowstring[idcurrency],
                                    Margin = 0,
                                    FlatMargin = 0,
                                    Canbesettled = true,
                                    UpdateDate = DateTime.UtcNow,
                                    commission =
                                        double.Parse(rowstring[idfees], CultureInfo.InvariantCulture)/
                                        double.Parse(rowstring[idqty], CultureInfo.InvariantCulture),
                                    Timestamp = DateTime.UtcNow,
                                    valid = 1,
                                    username = "TradeParser"
                                };
                            testexample.Contracts.Add(test);
                            testexample.SaveChanges();
                            contractrow =
                                from ct in testexample.Contracts
                                where ct.valid == 1
                                select ct;
                            contractdetails = contractrow.ToDictionary(k => k.id, k => k.ValueDate);
                        }
                        var side = 1;
                        if (rowstring[idside] == "sell") side = -1;
                        var vBOtradeTimestamp = Convert.ToDateTime(rowstring[idDate]);
                        if (rowstring[idSymbol].IndexOf(template) > 0)
                        {
                            var fortscurrentDate = Convert.ToDateTime(rowstring[idDate]);
                            var initialdate = fortscurrentDate.ToShortDateString();
                            fortscurrentDate = fortscurrentDate.AddHours(24 - nextdaystarthour + GMToffset);
                            if (initialdate != fortscurrentDate.ToShortDateString())
                                fortscurrentDate = nextdayvalueform;
                            rowstring[idDate] = fortscurrentDate.ToShortDateString();
                        }
                        index++;
                        if (index > 0)
                        {
                            var trade_id = rowstring[idexchangeOrderId];
                            var account_id = rowstring[idAccount];
                            var Date = Convert.ToDateTime(rowstring[idDate]);
                            var symbol_id = rowstring[idSymbol];
                            var qty = rowstring[idqty].IndexOf(".") == -1
                                          ? Convert.ToInt64(rowstring[idqty])*side
                                          : double.Parse(rowstring[idqty], CultureInfo.InvariantCulture)*side;
                            var price = double.Parse(rowstring[idprice], CultureInfo.InvariantCulture);
                            var cp_id = rowstring[idcounterparty];
                            var fees = double.Parse(rowstring[idfees], CultureInfo.InvariantCulture);
                            var value_date = valuedate; //Convert.ToDateTime(rowstring[idvalueDate]),
                            var currency = idcontractMultiplier > (rowstring.Length - 1)
                                               ? "USD"
                                               : rowstring[idcurrency];
                            var tradeNumber = Convert.ToInt64(rowstring[idtradeNumber]);
                            var Timestamp = DateTime.UtcNow;
                            var username = rowstring[iduser];
                            var order_id = rowstring[idorderid];
                            var gatewayId = rowstring[idgateway];
                            var BOtradeTimestamp = vBOtradeTimestamp;

                            allfromFile.Add(new Ctrade
                                {
                                    trade_id = rowstring[idexchangeOrderId],
                                    account_id = rowstring[idAccount],
                                    Date = Convert.ToDateTime(rowstring[idDate]),
                                    symbol_id = rowstring[idSymbol],
                                    qty = rowstring[idqty].IndexOf(".") == -1
                                              ? Convert.ToInt64(rowstring[idqty])*side
                                              : double.Parse(rowstring[idqty], CultureInfo.InvariantCulture)*side,
                                    price = double.Parse(rowstring[idprice], CultureInfo.InvariantCulture),
                                    cp_id = rowstring[idcounterparty],
                                    fees = double.Parse(rowstring[idfees], CultureInfo.InvariantCulture),
                                    value_date = valuedate, //Convert.ToDateTime(rowstring[idvalueDate]),
                                    currency = idcontractMultiplier > (rowstring.Length - 1)
                                                   ? "USD"
                                                   : rowstring[idcurrency],
                                    tradeNumber = Convert.ToInt64(rowstring[idtradeNumber]),
                                    Timestamp = DateTime.UtcNow,
                                    valid = 1,
                                    username = rowstring[iduser],
                                    order_id = rowstring[idorderid],
                                    gatewayId = rowstring[idgateway],
                                    BOtradeTimestamp = vBOtradeTimestamp,
                                    tradeType = rowstring[idtradeType],
                                    deliveryDate = Convert.ToDateTime(rowstring[idvalueDate])
                                });
                        }
                    }
                }
                TradesParserStatus.Text = "DB updating";
                //  CheckUniqueTrades(allfromFile);
                foreach (Ctrade tradeIndex in allfromFile)
                {
                    testexample.Ctrades.Add(tradeIndex);
                }

                try
                {
                    testexample.SaveChanges();
                }
                catch (DbEntityValidationException dbEx)
                {
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                        }
                    }
                }



                TradesParserStatus.Text = "Done";
                DateTime TimeEnd = DateTime.Now;
                LogTextBox.AppendText("\r\n" + TimeEnd.ToLongTimeString() + ": " + "BO trades uploading completed." +
                                      (TimeEnd - TimeStart).ToString());

            }

            Console.WriteLine(result); // <-- For debugging use. 
        }

        //todo get trades from DB BO   
        private List<Ctrade> getTradesFromDB(DateTime reportdate, List<string> cplist, bool removeReconciled)
        {
            var testexample = new EXANTE_Entities(_currentConnection);
            var prevreportdate = reportdate.AddDays(-1);
            var ts = new TimeSpan(16, 00, 0);
            prevreportdate = prevreportdate.Date + ts;

            var nextdate = reportdate.AddDays(1);
            var boTradeNumberlist = new List<long?>();
            if (removeReconciled)
            {
                var boTradeNumbers = testexample.CpTrades.Where(
                    cptrade => cptrade.valid == 1 && cptrade.ReportDate >= reportdate.Date &&
                               cptrade.ReportDate < (nextdate.Date) && cptrade.BOTradeNumber != null)
                                                .Select(cptrade => cptrade.BOTradeNumber);
                foreach (string boTradeNumber in boTradeNumbers)
                {
                    var templist = boTradeNumber.Split(';');
                    boTradeNumberlist.AddRange(templist.Select(s => (long?) Convert.ToInt64(s)));
                }
                //   boTradeNumberlist.AddRange(boTradeNumbers.ToList().Select(s => (long?) Convert.ToInt64(s)));
            }
            /* var queryable = from ct in testexample.Ctrades
                        where ct.valid == 1 && ct.Date >= reportdate.Date && ct.Date < (nextdate.Date) &&
                              cplist.Contains(ct.cp_id) && !boTradeNumberlist.Contains(ct.tradeNumber)
                        select ct;*/
            var queryable = from ct in testexample.Ctrades
                            where
                                ct.valid == 1 && ct.RecStatus == false && ct.BOtradeTimestamp >= prevreportdate &&
                                ct.Date < (nextdate.Date)&&cplist.Contains(ct.cp_id)
                            select ct;

            return queryable.ToList();
        }

        private Array getBOtoABNMapping()
        {
            var testexample = new EXANTE_Entities(_currentConnection);
            var queryable =
                from ct in testexample.Mappings
                where ct.valid == 1 && ct.Type == "Cp"
                select new {ct.BrockerSymbol, ct.BOSymbol};
            return queryable.ToArray();
        }

        private Dictionary<int, string> GetCPmapping()
        {
            var testexample = new EXANTE_Entities(_currentConnection);
            var cpfromDb = from cp in testexample.counterparties
                           select cp;
            return cpfromDb.ToDictionary(k => k.cp_id, k => k.Name);
        }
        

        private string FXFWDupdate(string str)
        {
            var indexE2 = str.IndexOf('.') + 1;
            if (indexE2 == 0)
            {
                indexE2 = str.IndexOf("A3");
                if (indexE2 == 0)
                {
                    indexE2 = str.IndexOf("E4");
                }
            }
            var currency = str.Substring(0, indexE2 - 1);
            //  currency=currency.Replace('/');
            if ((str.IndexOf("SPOT") == -1) && (str.IndexOf("EXANTE") == -1) && (str.IndexOf("E6") == -1) &&
                (str.IndexOf("E5") == -1))
            {
                var Date = str.Substring(indexE2 + 3, str.Length - indexE2 - 3);
                //  var month  =Date.match(/\w+/);
                //  var validRegExp = /['A'-'z']+/;
                /*  
        //    var month = validRegExp.Exec(Date);
            if (month!=null){
            month=month[0];
            var monthDigit;
            switch(month)
            {
              case "F":
                    monthDigit = "01";
                break;   
              case "G":
                    monthDigit = "02";
                break;    
              case "H":
                    monthDigit = "03";
                break;   
              case "J":
                    monthDigit = "04";
                break; 
              case "K":
                    monthDigit = "05";
                break;   
              case "M":
                    monthDigit = "06";
                break; 
              case "N":
                    monthDigit = "07";
                break; 
              case "O":
                    monthDigit = "08";
                break;    
              case "U":
                    monthDigit = "09";
                break;
              case "V":
                    monthDigit = "10";
                break;    
              case "X":
                    monthDigit = "11";
                break;
              case "Z":
                    monthDigit = "12";
                break;
              default:
                    MonthDigit = "";
            }
    var indexMonth=Date.IndexOf(month);
    var dayDigit = Date.Substring(0,indexMonth);
    if (Convert.ToInt16(dayDigit)<10)dayDigit="0"+dayDigit;
    var YearDigit = Date.Substring(indexMonth+1,Date.Length-indexMonth-1);
    currency=currency.Concat(YearDigit,monthDigit,dayDigit);
  } */
            }
            else
            {
                currency = currency + "FX";
            }
            return currency;
        }

        private void AbnRecon(DateTime reportdate, List<CpTrade> trades)
        {
            var cplist = new List<string> { "LEK", "CQG", "FASTMATCH", "CURRENEX", "EXANTE", "AMRO", "" };
            var mltytrades = MultyTradesCheckBox.Checked;
            var skipspr = SkipspreadcheckBox.Checked;
            var boTradeslist = CreateIdForBoTrades(getTradesFromDB(reportdate, cplist, true));
            var numberBoTrades = boTradeslist.Count;
            var cpmapping = getBOtoABNMapping();
          //  var symbolMap = getSymbolMap("ABN");
            var bomap = getMap("ABN");
            var abnTradeslist = CreateIdForCpTrades(getOnlyTrades(trades), "ABN");
            var recon = new List<Reconcilation>();
            var db = new EXANTE_Entities(_currentConnection);
            foreach (var cpTrade in abnTradeslist)
            {
                List<Ctrade> ctrade;
                 if (boTradeslist.TryGetValue(cpTrade.Id, out ctrade))
                {
                    UpdateRecTrades(cpTrade, ctrade, db, boTradeslist, recon);
                    ctrade.RemoveAt(0);
                    if (ctrade.Count == 0)
                    {
                        boTradeslist.Remove(cpTrade.Id);
                    }
                }
                else
                {
                    if (mltytrades)
                    {
                        var reclist = CheckMultitrades(cpTrade, boTradeslist.Values.SelectMany(x => x).ToList());
                        if (reclist != null)
                        {
                            var n = reclist.Count;
                            for (var i = 0; i < n; i++)
                            {
                                var keysWithMatchingValues =
                                    boTradeslist.Where(p => p.Value[0].fullid == reclist[0].fullid)
                                                .Select(p => p.Key)
                                                .FirstOrDefault();
                                UpdateRecTrades(cpTrade, reclist, db, boTradeslist, recon);
                                reclist.RemoveAt(0);
                                if (boTradeslist[keysWithMatchingValues].Count == 1)
                                {
                                    boTradeslist.Remove(keysWithMatchingValues);
                                }
                                else
                                {
                                    boTradeslist[keysWithMatchingValues].RemoveAt(0);
                                }
                            }
                        }

                    }
                }
            }
            db.SaveChanges();
            if (mltytrades)
            {
                for (int j = boTradeslist.Count - 1; j >= 0; j--)
                {
                    var currentkey = boTradeslist.Keys.ElementAt(j);
                    List<Ctrade> valuePair = boTradeslist[currentkey];
                    for (var listindex = 0; listindex < valuePair.Count; listindex++)
                    {
                        var ctrade = valuePair[listindex];
                        var reclist = new List<CpTrade>();

                        if (!SkipspreadcheckBox.Checked)
                        {
                            if (ctrade.symbol_id.Contains(".CS/"))
                            {
                                var reclistids = workeithCS(ctrade, abnTradeslist);
                                reclist.AddRange(
                                    reclistids.Select(
                                        t => abnTradeslist.Where(item => (item.FullId == t)).FirstOrDefault()));
                                double leftsum = 0;
                                double rightsum = 0;
                                foreach (CpTrade cpTrade in reclist)
                                {
                                    double? cqty = cpTrade.Qty;
                                    if (cpTrade.Qty > 0)
                                    {
                                        leftsum = (double) (leftsum + cqty);
                                    }
                                    else
                                    {
                                        rightsum = (double) (rightsum + cqty);
                                    }
                                }
                            }
                        }
                        if (reclist.Count == 0)
                        {
                            reclist = CheckMultitradesBack(ctrade,
                                                           abnTradeslist.Where(x => (x.BOTradeNumber == null)).ToList());

                        }

                        if (reclist != null)
                        {
                            var n = reclist.Count;
                            for (var i = 0; i < n; i++)
                            {
                                var templist = new List<Ctrade> {ctrade};
                                UpdateRecTrades(reclist[i], templist, db, boTradeslist, recon);
                            }
                            db.SaveChanges();
                            boTradeslist[currentkey].RemoveAt(listindex);
                            listindex--;
                        }

                    }
                    if (valuePair.Count == 0)
                    {
                        boTradeslist.Remove(currentkey);
                    }
                }
            }
            foreach (Reconcilation reconcilation in recon)
            {
                db.Reconcilations.Add(reconcilation);
            }
            db.SaveChanges();
        }

        private void MacRecon(DateTime reportdate, List<CpTrade> trades)
        {
            var cplist = new List<string> { "CQG"};
            var boTradeslist = CreateIdForBoTrades(getTradesFromDB(reportdate, cplist, true));
            var cpmapping = getBOtoABNMapping();
            var bomap = getMap("Mac");
            var TradeList = CreateIdForCpTrades(getOnlyTrades(trades),"Mac");
            var recon = new List<Reconcilation>();
            var db = new EXANTE_Entities(_currentConnection);
            foreach (var cpTrade in TradeList)
            {
                List<Ctrade> ctrade;
                if (boTradeslist.TryGetValue(cpTrade.Id, out ctrade))
                {
                    UpdateRecTrades(cpTrade, ctrade, db, boTradeslist, recon);
                    ctrade.RemoveAt(0);
                    if (ctrade.Count == 0)
                    {
                        boTradeslist.Remove(cpTrade.Id);
                    }
                }
                else
                {
                  
                }
            }
            db.SaveChanges();
            foreach (Reconcilation reconcilation in recon)
            {
                db.Reconcilations.Add(reconcilation);
            }
            db.SaveChanges();
        }


        private List<long> workeithCS(Ctrade ctrade, List<CpTrade> abnTradeslist)
        {
            var inndexcs = ctrade.symbol_id.IndexOf(".CS/");
            var indexseparate = ctrade.symbol_id.IndexOf("-");
            var leftside = ctrade.symbol_id.Substring(0, inndexcs + 1) +
                           ctrade.symbol_id.Substring(inndexcs + 4, indexseparate - inndexcs - 4);
            var vd = getValueDate(leftside);
            var Cqty = (double) ctrade.qty;
            var spreadprice = ctrade.price;
            var rightside = ctrade.symbol_id.Substring(0, inndexcs + 1) +
                            ctrade.symbol_id.Substring(indexseparate + 1, ctrade.symbol_id.Length - indexseparate - 1);
            var leftalltrades =
                abnTradeslist.Where(item => ((item.BOSymbol == leftside) && (item.BOTradeNumber == null)))
                             .Select(item => new {qty = item.Qty, price = item.Price, id = item.FullId});
            var righttalltrades =
                abnTradeslist.Where(item => ((item.BOSymbol == rightside) && (item.BOTradeNumber == null)))
                             .Select(item => new {qty = item.Qty, price = item.Price, id = item.FullId});
            var pricelist = leftalltrades.Select(item => item.price).Distinct().ToList();
            var indexprice = 0;
            var pairfound = false;
            var reclist = new List<long>();
            while (indexprice < pricelist.Count && !pairfound)
            {
                var currentprice = pricelist[indexprice];
                var leftossibleletrades =
                    leftalltrades.Where(item => (item.price == currentprice))
                                 .Select(item => new Trade {id = item.id, qty = (double) item.qty})
                                 .ToList();
                leftossibleletrades = Samesidetrades(Cqty, leftossibleletrades);
                double sum = 0;
                foreach (Trade sumtrade in leftossibleletrades)
                {
                    sum = sum + sumtrade.qty;
                }

                if (Math.Abs(sum) >= Math.Abs(Cqty))
                {
                    var leftreclist = CheckMultitradesNew(Cqty, leftossibleletrades);
                    if (leftreclist != null)
                    {
                        reclist.Clear();
                        for (var i = 0; i < leftreclist.Count; i++)
                        {
                            reclist.Add(leftossibleletrades[leftreclist[i]].id);
                        }
                        var rightpathprice = currentprice - spreadprice;
                        rightpathprice = Math.Round((double) rightpathprice, 8);
                        var rightpossibleletrades =
                            righttalltrades.Where(item => (item.price == rightpathprice))
                                           .Select(item => new Trade {id = item.id, qty = (double) item.qty})
                                           .ToList();
                        rightpossibleletrades = Samesidetrades(-(double) ctrade.qty, rightpossibleletrades);
                        double rightsum = 0;
                        foreach (Trade sumtrade in rightpossibleletrades)
                        {
                            rightsum = rightsum + sumtrade.qty;
                        }

                        if (Math.Abs(rightsum) >= Math.Abs(Cqty))
                        {
                            var rightcty = -Cqty;
                            var rightreclist = CheckMultitradesNew(rightcty, rightpossibleletrades);
                            if (rightreclist != null)
                            {
                                for (var i = 0; i < rightreclist.Count; i++)
                                {
                                    reclist.Add(rightpossibleletrades[rightreclist[i]].id);
                                }
                            }
                            else
                            {
                                reclist.Clear();
                            }
                            // var indexReclist = 0;
                            // pairfound = true;

                            /*     while ((indexReclist < leftreclist.Count) && (pairfound))
                            {
                                var testid = (int) leftreclist[indexReclist];
                                var CrtRecListQty = -leftossibleletrades.ElementAt((int) leftreclist[indexReclist]).qty;
                              //  var rightid = rightpossibleletrades.Where(item => (item.qty == CrtRecListQty)).Select(item => item.id).FirstOrDefault();
                                var rightidtrade = rightpossibleletrades.Where(item => (item.qty == CrtRecListQty)).Select(item => item).FirstOrDefault();
                               // var rightqty = rightidtrade.qty;
                                var rightid = rightidtrade.id;
                             //   List<Trade> righttrade = rightpossibleletrades.Where(item => (item.id == rightid)).Select(item => item).ToList(); //new Trade { id = item.id, qty = (double)item.qty }).ToList();
                                double rightqty = 0;
                                rightqty=rightidtrade.qty;
                                if (rightid != 0)
                                {
                                    reclist.Add(rightid);
                                    rightpossibleletrades =
                                        rightpossibleletrades.Where(item => (item.id != rightid)).Select(item => item).ToList();//new Trade { id = item.id, qty = (double)item.qty }).ToList();
                                 //   .RemoveAt(0);
                                    indexReclist++;
                                }
                                else
                                {
                                    pairfound = false;
                                }
                            }
                            if (!pairfound)
                            {
                                var rightreclist = CheckMultitradesNew(-Cqty, rightpossibleletrades);
                                reclist.Clear();
                                if (rightreclist != null)
                                {
                                    for (var i = 0; i < rightreclist.Count; i++)
                                    {
                                        reclist.Add(rightpossibleletrades[i].id);
                                    }
                                }
                            }*/
                        }
                        else reclist.Clear();
                    }
                }
                indexprice++;
            }

            /* if (pairfound)
            {
             /*   var templist = new List<Ctrade> {ctrade};
         //       var cpTrade= abnTradeslist.Where(item => (item.FullId == leftalltrades. )
         //       UpdateRecTrades(reclist[i], templist, db, boTradeslist, recon);

                var n = reclist.Count;
                   for (var i = 0; i < n; i++)
                            {
                                var keysWithMatchingValues =
                                    abnTradeslist.Where(p => p.Value[0].fullid == reclist[0].fullid)
                                                .Select(p => p.Key)
                                                .FirstOrDefault();
                                UpdateRecTrades(cpTrade, reclist, db, boTradeslist, recon);
                                reclist.RemoveAt(0);
                                if (abnTradeslist[keysWithMatchingValues].Count == 1)
                                {
                                    abnTradeslist.Remove(keysWithMatchingValues);
                                }
                                else
                                {
                                    abnTradeslist[keysWithMatchingValues].RemoveAt(0);
                                }
                            }
                
                return reclist;
            }*/
            return reclist;
        }

        private static List<Trade> Samesidetrades(double qty, List<Trade> trades)
        {
            List<Trade> possibleletrades;
            if (qty > 0)
            {
                var allpossibleletrades =
                    trades.Where(item => (item.qty > 0 && Math.Abs((double) item.qty) <= Math.Abs(qty)));
                possibleletrades = allpossibleletrades.OrderByDescending(o => o.qty).ToList();
            }
            else
            {
                var allpossibleletrade =
                    trades.Where(item => (item.qty < 0 && Math.Abs((double) item.qty) <= Math.Abs(qty)));
                possibleletrades = allpossibleletrade.OrderBy(o => o.qty).ToList();
            }
            return possibleletrades;
        }

        private string getValueDate(string leftside)
        {
            var testexample = new EXANTE_Entities(_currentConnection);
            var mapfromDb = from c in testexample.Contracts
                            where c.id == leftside
                            select c.ValueDate;
            if (mapfromDb.FirstOrDefault() != null) return mapfromDb.FirstOrDefault().Value.ToShortDateString();
            else return null;
        }

        private List<CpTrade> CheckMultitradesBack(Ctrade ctrade, List<CpTrade> ABNtrades)
        {
            List<long> sequence = null;
            List<CpTrade> listBoTrades = null;
            if (ctrade != null)
            {
                var possibletrades =
                    ABNtrades.Where(item => (item.BOSymbol == ctrade.symbol_id && item.Price == ctrade.price));
                if (ctrade.qty > 0)
                {
                    possibletrades = possibletrades.Where(item => item.Qty > 0);
                    possibletrades = possibletrades.OrderByDescending(o => o.Qty);
                }
                else
                {
                    possibletrades = possibletrades.Where(item => item.Qty < 0);
                    possibletrades = possibletrades.OrderBy(o => o.Qty);
                }
                sequence = new List<long>();
                if (possibletrades.Count() > 0)
                {
                    if (ctrade.qty == possibletrades.ElementAt(0).Qty)
                    {
                        if (possibletrades.ElementAt(0).BOTradeNumber != null)
                        {
                            sequence.Add((long) possibletrades.ElementAt(0).FullId);
                            listBoTrades.Add(possibletrades.ElementAt(0));
                        }

                    }
                    else
                    {
                        var i = 0;
                        double qty = 0;
                        while ((i < possibletrades.Count()) && (qty != ctrade.qty))
                        {
                            if (Math.Abs((double) possibletrades.ElementAt(i).Qty) < Math.Abs((double) ctrade.qty))
                            {
                                qty = (double) possibletrades.ElementAt(i).Qty;
                                if (sequence.Count == 0) sequence.Add(i);
                                else sequence[0] = i;
                                qty = calculateQtyBack(ctrade.qty, qty, i + 1, possibletrades.ToList(), sequence, 1);
                                if (qty != ctrade.qty) i++;
                            }
                            else i++;
                        }
                        if ((qty == ctrade.qty) && (sequence.Count > 0))
                        {
                            listBoTrades = new List<CpTrade> {possibletrades.ElementAt((int) sequence[0])};
                            for (i = 1; i < sequence.Count; i++)
                            {
                                listBoTrades.Add(possibletrades.ElementAt((int) sequence[i]));
                            }
                        }
                    }
                }
            }
            return listBoTrades;
        }

        private double calculateQtyBack(double? InitialQty, double qty, int i, List<CpTrade> possibletrades,
                                        List<long> sequence, int level)
        {
            double nextValue = 0;
            if (i < possibletrades.Count)
            {
                nextValue = (double) possibletrades[i].Qty;
            }
            while ((i < possibletrades.Count) && ((qty) != InitialQty))
            {
                if (Math.Abs(nextValue + qty) <= Math.Abs((double) InitialQty))
                {
                    qty = nextValue + qty;
                    if (sequence.Count == level) sequence.Add(i);
                    else sequence[level] = i;
                    if (qty != InitialQty)
                        qty = calculateQtyBack(InitialQty, qty, i + 1, possibletrades, sequence, level + 1);
                }
                else
                {
                    i++;
                    if (i < possibletrades.Count) nextValue = (double) possibletrades[i].Qty;
                }
            }
            return qty;
        }

        private IEnumerable<Ctrade> getBOTradesfromList(Dictionary<string, List<Ctrade>> boTradeslist,
                                                        List<long> listToRemove)
        {
            //todo make fast exctraction
            /*   foreach (KeyValuePair<string, List<Ctrade>> keyValuePair in boTradeslist)
            {
                var currentvalue = keyValuePair.Value;
                foreach (Ctrade ctrade in currentvalue)
                {
                 //   ctrade.fullid
                       currentvalue
                }
                //currentvalue
               // if(keyValuePair.Value)
            }*/
            return null;
        }


        private static void UpdateRecTrades(CpTrade cpTrade, List<Ctrade> ctrade, EXANTE_Entities db,
                                            Dictionary<string, List<Ctrade>> boTradeslist,
                                            List<Reconcilation> recon)
        {
            var botradenumber = ctrade[0].tradeNumber;
            if (cpTrade.BOTradeNumber == null)
            {
                cpTrade.BOTradeNumber = botradenumber.ToString();
            }
            else
            {

                cpTrade.BOTradeNumber = cpTrade.BOTradeNumber + ";" + botradenumber.ToString();
            }
            cpTrade.BOcp = ctrade[0].cp_id;
            cpTrade.BOSymbol = ctrade[0].symbol_id;
            cpTrade.Comment = ctrade[0].BOtradeTimestamp.Value.ToShortDateString();
            ctrade[0].RecStatus = true;
            db.CpTrades.Attach(cpTrade);
            db.Entry(cpTrade).State = (System.Data.Entity.EntityState) EntityState.Modified;
            db.Ctrades.Attach(ctrade[0]);
            db.Entry(ctrade[0]).State = (System.Data.Entity.EntityState) EntityState.Modified;


            recon.Add(new Reconcilation
                {
                    CpTrade_id = cpTrade.FullId,
                    Ctrade_id = botradenumber,
                    Timestamp = DateTime.UtcNow,
                    username = "TradeParser",
                    valid = 1
                });
            db.SaveChanges();
        }

        private List<int> CheckMultitradesNew(double initialQty, List<Trade> possibletrades)
        {
            List<int> sequence = null;
            if (initialQty != 0)
            {
                if (possibletrades.Count() > 0)
                {
                    sequence = new List<int>();
                    if (initialQty == possibletrades.ElementAt(0).qty)
                    {
                        if (possibletrades.ElementAt(0) != null)
                        {
                            sequence.Add(0);
                        }
                    }
                    else
                    {
                        var i = 0;
                        double qty = 0;
                        while ((i < possibletrades.Count()) && (qty != initialQty))
                        {
                            qty = (double) possibletrades.ElementAt(i).qty;
                            sequence.Clear();
                            sequence.Add(i);
                            qty = calculateQtyNew(initialQty, qty, i + 1, possibletrades.ToList(), sequence, 1);
                            if (qty != initialQty) i++;
                        }
                        if ((qty != initialQty)) //||(sequence.Count == 1))
                        {
                            sequence = null;
                        }

                    }
                }
            }
            return sequence;
        }

        private double calculateQtyNew(double? InitialQty, double qty, int i, List<Trade> possibletrades,
                                       List<int> sequence, int level)
        {

            double nextValue = 0;
            if (i < possibletrades.Count)
            {
                nextValue = (double) possibletrades[i].qty;
            }
            while ((i < possibletrades.Count) && ((qty) != InitialQty))
            {
                if (Math.Abs(nextValue) + Math.Abs(qty) <= Math.Abs((double) InitialQty))
                {
                    qty = nextValue + qty;
                    if (sequence.Count == level) sequence.Add(i);
                    else
                    {
                        sequence[level] = i;
                        if (sequence.Count > level + 1) sequence.RemoveAt(level + 1);
                    }
                    if (qty != InitialQty)
                    {
                        var nextlevelqty = calculateQtyNew(InitialQty, qty, i + 1, possibletrades, sequence, level + 1);
                        if (nextlevelqty != InitialQty)
                        {
                            i++;
                            if (sequence.Count > level + 1) sequence.RemoveAt(level + 1);
                            qty = qty - nextValue;
                        }
                        else
                        {
                            qty = nextlevelqty;
                        }
                    }
                }
                else
                {
                    i++;
                    if (i < possibletrades.Count) nextValue = (double) possibletrades[i].qty;
                }
            }
            return qty;
        }


        private List<Ctrade> CheckMultitrades(CpTrade trade, List<Ctrade> boTrades)
        {
            List<long> sequence = null;
            List<Ctrade> listBoTrades = null;
            if (trade != null)
            {
                var symbol = trade.BOSymbol;
                var price = trade.Price;
                //   bool positiveqtyflag = !(trade.Qty < 0);
                var initialQty = trade.Qty;
                //      if ((boTrades[i].symbol_id == symbol && boTrades[i].price == price) && (boTrades[i].qty > 0 && positiveqtyflag && (Math.Abs((double)boTrades[i].qty) < qtyflag))) possibletrades.Add(boTrades[i]);
                var possibletrades = boTrades.Where(item => (item.symbol_id == symbol && item.price == price));
                if (trade.Qty > 0)
                {
                    possibletrades =
                        possibletrades.Where(
                            item => (item.qty > 0 && Math.Abs((double) item.qty) < Math.Abs((double) initialQty)));
                    possibletrades = possibletrades.OrderByDescending(o => o.qty);
                }
                else
                {
                    possibletrades =
                        possibletrades.Where(
                            item => (item.qty < 0 && Math.Abs((double) item.qty) < Math.Abs((double) initialQty)));
                    possibletrades = possibletrades.OrderBy(o => o.qty);
                }

                sequence = new List<long>();
                if (possibletrades.Count() > 0)
                {
                    if (trade.Qty == possibletrades.ElementAt(0).qty)
                    {
                        if (possibletrades.ElementAt(0).tradeNumber != null)
                        {
                            sequence.Add((long) possibletrades.ElementAt(0).fullid);
                            listBoTrades.Add(possibletrades.ElementAt(0));
                        }
                    }
                    else
                    {
                        var i = 0;
                        double qty = 0;
                        while ((i < possibletrades.Count()) && (qty != initialQty))
                        {
                            qty = (double) possibletrades.ElementAt(i).qty;
                            if (sequence.Count == 0) sequence.Add(i);
                            else sequence[0] = i;
                            qty = calculateQty(trade.Qty, qty, i + 1, possibletrades.ToList(), sequence, 1);
                            if (qty != trade.Qty) i++;
                        }
                        if (((qty == trade.Qty)) && (sequence.Count > 0))
                        {
                            listBoTrades = new List<Ctrade> {possibletrades.ElementAt((int) sequence[0])};
                            for (i = 1; i < sequence.Count; i++)
                            {
                                listBoTrades.Add(possibletrades.ElementAt((int) sequence[i]));
                            }
                        }
                    }
                }
            }
            return listBoTrades;
        }

        private double calculateQty(double? InitialQty, double qty, int i, List<Ctrade> possibletrades,
                                    List<long> sequence, int level)
        {
            //    private double calculateQty(double InitialQty,qty,i,possibletrades,Sequence,level){

            double nextValue = 0;
            if (i < possibletrades.Count)
            {
                nextValue = (double) possibletrades[i].qty;
            }
            while ((i < possibletrades.Count) && ((qty) != InitialQty))
            {
                if (Math.Abs(nextValue + qty) <= Math.Abs((double) InitialQty))
                {
                    qty = nextValue + qty;
                    if (sequence.Count == level) sequence.Add(i);
                    else sequence[level] = i;
                    if (qty != InitialQty)
                        qty = calculateQty(InitialQty, qty, i + 1, possibletrades, sequence, level + 1);
                    if (qty != InitialQty) {
                        i++;
                        qty = qty-nextValue;
                        if (i < possibletrades.Count) nextValue = (double)possibletrades[i].qty;
                        for (var j=sequence.Count-1;j>level;j--)sequence.RemoveAt(j);
                    }
                }
                else
                {
                    i++;
                    if (i < possibletrades.Count) nextValue = (double) possibletrades[i].qty;
                }
            }
            return qty;
        }

        private List<CpTrade> getOnlyTrades(List<CpTrade> trades)
        {
            for (int i = 0; i < trades.Count; i++)
            {
                if ((trades[i].TypeOfTrade != "01") && (trades[i].TypeOfTrade == "05"))
                {
                    trades.RemoveAt(i);
                    i--;
                }
            }
            return trades;
        }


        private static List<CpTrade> CreateIdForCpTrades(List<CpTrade> trades,string Brocker)
        {
            var ABNMap = getMap(Brocker);
            foreach (CpTrade cpTrade in trades)
            {
                if (cpTrade.BOTradeNumber == null)
                {
                    var key = "";
                    if ((cpTrade.Type == "OP") )
                    {
                        Map symbolvalue;
                        if (ABNMap.TryGetValue(cpTrade.Symbol.Substring(0, cpTrade.Symbol.IndexOf(".")) + cpTrade.Type,
                                               out symbolvalue))
                        {
                            var daystring = "";
                            if (symbolvalue.Round == 1) daystring = cpTrade.ValueDate.Value.Day.ToString();
                            var type = cpTrade.Symbol.Substring(cpTrade.Symbol.IndexOf(".") + 1, 1);

                            var stringstike = cpTrade.Symbol.Substring(cpTrade.Symbol.IndexOf(".") + 2);
                            var strike = Convert.ToDouble(stringstike)*symbolvalue.MtyPrice;
                            stringstike = strike.ToString();
                            stringstike = stringstike.Replace(".", "_");
                            key = symbolvalue.BOSymbol + "." + daystring +
                                  getLetterOfMonth(cpTrade.ValueDate.Value.Month) + cpTrade.ValueDate.Value.Year + "." +
                                  type + stringstike;
                            cpTrade.BOSymbol = key;
                        }
                    }
                    else
                    {
                        key = cpTrade.BOSymbol;
                    }
                    //todo убрать эти условия

                    switch (cpTrade.Type)
                    {
                        case "OP":
                            {
                                break;
                            }
                        case "O":
                            {
                                break;
                            }
                        case "ST":
                        case "FX":
                        case "FW-E":
                        case "PM":
                            {
                                key = key + cpTrade.Type;
                                break;
                            }
                     /*   case "F":
                            {
                                key = key + "ST";
                                break;
                            }*/
                        default:
                            var vd = cpTrade.ValueDate.GetValueOrDefault().ToShortDateString();
                            key = key + vd;
                            break;
                    }
                    key = key + cpTrade.Qty.ToString() + cpTrade.Price.ToString();

                    /*
                                    if (cpTrade.Type == "OP") {
                                        key = key + "ST" + cpTrade.Qty.ToString() + cpTrade.Price.ToString();
                                    }else{     if ((cpTrade.Type == "ST") || (cpTrade.Type == "FX") || (cpTrade.Type == "FW-E") || (cpTrade.Type == "PM"))
                                    {
                                        key = key + cpTrade.Type + cpTrade.Qty.ToString() + cpTrade.Price.ToString();
                                    }
                                    else
                                    {
                                        var vd = cpTrade.ValueDate.GetValueOrDefault().ToShortDateString();
                                        key = key + vd + cpTrade.Qty.ToString() + cpTrade.Price.ToString();
                                    }}*/
                    cpTrade.Id = key;
                }
            }
            return trades;
        }

        private static Dictionary<string, List<Ctrade>> CreateIdForBoTrades(List<Ctrade> boTradeslist)
        {
            var result = new Dictionary<string, List<Ctrade>>();
            var defaultvalue = new DateTime(2011, 1, 1);
            var defaltvd = defaultvalue.ToShortDateString();
            var bomap = getMap("BO");
            Map symbolvalue;

            foreach (Ctrade botrade in boTradeslist)
            {
                var vd = botrade.value_date.GetValueOrDefault().ToShortDateString();
                var key = botrade.symbol_id;
                if (vd == defaltvd)
                {
                    if (bomap.TryGetValue(key, out symbolvalue))
                    {
                        key = symbolvalue.BOSymbol + symbolvalue.Type;
                    }
                    else
                    {
                        // ((dateindex > -1)&& (Regex.Match(key.Substring(dateindex+3, 1), "[0-9]").Value != ""))
                        var dateindex = botrade.symbol_id.IndexOf("E2");
                        if (!IsOption(botrade.symbol_id))
                        {
                            if (IsFw(botrade.symbol_id) > -1)
                            {
                                dateindex = dateindex + 3;
                                var date = key.Substring(dateindex);
                               var Monthletter = Regex.Match(date, "[A-Z]").Value;
                                var Day = Convert.ToInt32(date.Substring(0, date.IndexOf(Monthletter)));
                                var Year = Convert.ToInt32(date.Substring(date.IndexOf(Monthletter) + 1));
                                var Month = GetMonthFromLetter(Monthletter);
                                var valuedate = new DateTime(Year, Month, Day);
                                var testtt = key.Substring(0, 7).Replace("/", "");
                                key = testtt + valuedate.ToShortDateString();

                            }
                            else
                            {
                                key = key + "ST";
                            }
                        }
                    }
                    key = key + botrade.qty.ToString() + botrade.price.ToString();
                }
                else
                {
                    key = key + vd + botrade.qty.ToString() + botrade.price.ToString();
                }
                if (result.ContainsKey(key))
                {
                    result[key].Add(botrade);
                }
                else result.Add(key, new List<Ctrade> {botrade}); //tempBotrade});
            }

            return result;
        }

        private static int IsFw(string symbolId)
        {
            var dateindex = symbolId.IndexOf("E2");
            if ((dateindex > -1) && (Regex.Match(symbolId.Substring(dateindex + 3, 1), "[0-9]").Value != ""))
            {
                return dateindex;
            }
            else
            {
                return -1;
            }
        }

        private static bool IsOption(string symbolId)
        {
            int amount = Regex.Matches(symbolId, "['.']").Count;
            if (amount == 3)
            {
                return true;
            }
            else
            {
                return false;
            }

        }

        private static int GetMonthFromLetter(string month)
        {
            switch (month)
            {
                case "F":
                    return 1;
                    break;
                case "G":
                    return 2;
                    break;
                case "H":
                    return 3;
                    break;
                case "J":
                    return 4;
                    break;
                case "K":
                    return 5;
                    break;
                case "M":
                    return 6;
                    break;
                case "N":
                    return 7;
                    break;
                case "Q":
                    return 8;
                    break;
                case "U":
                    return 9;
                    break;
                case "V":
                    return 10;
                    break;
                case "X":
                    return 11;
                    break;
                case "Z":
                    return 12;
                    break;
                default:
                    return 0;
            }
        }

        private Dictionary<string,Map> getSymbolMap(string brockertype)
        {
           var testexample = new EXANTE_Entities(_currentConnection);
            var mapfromDb = from m in testexample.Mappings
                            join c in testexample.Contracts on m.BOSymbol equals c.id
                            where m.Brocker == brockertype
                            select new
                            {
                                m.BrockerSymbol,
                                m.BOSymbol,
                                m.MtyPrice,
                                m.MtyVolume,
                                m.Type,
                                m.Round,
                                c.ValueDate
                            };
            var results = new Dictionary<string, Map>();
            var mapfromDblist = mapfromDb.ToList();
            foreach (var item in mapfromDblist)
            {
                var key = item.BOSymbol;
                results.Add(key, new Map
                {
                    BOSymbol = item.BrockerSymbol,
                    MtyPrice = item.MtyPrice,
                    MtyVolume = item.MtyVolume,
                    Round = item.Round,
                    Type = item.Type,
                    ValueDate = item.ValueDate,
                });
            }
            return results;

        }

        // todo make uniqueid
        // todo recon

        private List<string> ABNgetRowsFromCliff(List<string> strArray, int startposition, int number, string value)
        {
            var result = new List<string>();
            for (var index = 0; index < strArray.Count; index++)
            {
                var tempstr = strArray[index];
                if (tempstr.Substring(startposition, number) == value)
                {
                    result.Add(tempstr);
                    strArray.RemoveAt(index);
                    index--;
                }
            }
            return result;
        }

        private Dictionary<string,Map> getMapping(string filter)
        {
            var testexample = new EXANTE_Entities(_currentConnection);
            var mapfromDb = from map in testexample.Mappings
                           where map.valid == 1 && map.Brocker == filter
                           select map;
   
            var results = new Dictionary<string, Map>();
            var mapfromDblist = mapfromDb.ToList();
            foreach (var item in mapfromDblist)
            {
                var key = item.BrockerSymbol;
                results.Add(key, new Map
                {
                    BOSymbol = item.BOSymbol,
                    MtyPrice = item.MtyPrice,
                    MtyVolume = item.MtyVolume,
                    Round = item.Round,
                    Type = item.Type,
                    ValueDate = new DateTime(2011, 01, 01)
                });
            }
            return results;
        }

        /*  
          private List<Array> ABNTradesParser(List<string> BodyStrArray)
          {
            var RawTradesArray = ABNgetRowsFromCliff(BodyStrArray,0,3,"410");
            var result = new List<Array>();
            if((RawTradesArray!=null)&&(RawTradesArray.Count>0)){ 
            var mappingST = getMapping("STOCK&FX");    
        /*    var mappingFW = getMapping("FW");
            var mapping;
            var result= new Array();
            for (var index =0;index <RawTradesArray.Count;index++){
              var tradecode = RawTradesArray[index].Substring(108,2);
              var code92= RawTradesArray[index].Substring(405,4);
              var typeofTrade = RawTradesArray[index].Substring(60,2);
                if ((code92 == "    "))
                {
                    var tempraw = new Array();
                    var tradedate = RawTradesArray[index].Substring(295, 8);
                    tempraw[0] = getDate(tradedate);
                    tempraw[1] = RawTradesArray[index].Substring(54, 6);

                    var symbol = RemoveChar(RawTradesArray[index].Substring(66, 6), " ");
                    tempraw[2] = symbol;

                    if (typeofTrade == "FW")
                    {
                        mapping = mappingFW;
                    }
                    else mapping = mappingST;

                    var j = Fn.getElementId(mapping, 0, symbol);

                    if (j > -1)
                    {
                        tempraw[10] = mapping[j][1];
                    }
                  else
                   {
                     tempraw[10] = "";
                     mappingST = getMapping("STOCK&FX");
                       mappingFW = getMapping("FW");
                   }
                  tempraw[2] = symbol;
     
                 var valuedate = RawTradesArray[index].Substring(303,8);
                 if (valuedate =="00000000")valuedate = RawTradesArray[index].Substring(72,8);
                 tempraw[3]=typeofTrade;
                 tempraw[4]=getDate(valuedate);
      
                 var volume = RawTradesArray[index].Substring(112,10);
                 var volumelong = parseInt(volume,10)+parseInt(RawTradesArray[index].Substring(122,2),10)/100;
                 volume = RawTradesArray[index].Substring(125,10);
                 volume = volumelong-parseInt(volume,10)-parseInt(RawTradesArray[index].Substring(135,2),10)/100;
                 if(j>-1) volume = volume*mapping[j][3];
                 tempraw[5] = volume;

                 var value =  RawTradesArray[index].Substring(276,16);
                 var value = parseInt(value,10)+parseInt(RawTradesArray[index].Substring(292,2),10)/100;
         
                 if(RawTradesArray[index].Substring(294,1)=="D")value=-value;

                    if (j > -1)
                    {
                        tempraw[6] = Fn.Round(-value/volume, mapping[j][5]);
                    }
                    else tempraw[6] = Fn.Round(-value/volume, 10);

                    var exchfee =  RawTradesArray[index].Substring(137,10);
                 var exchfee = parseInt(exchfee,10)+parseInt(RawTradesArray[index].Substring(147,2),10)/100;
                 if(RawTradesArray[index].Substring(149,1)=="D")exchfee=-exchfee; 
                 tempraw[7]=exchfee;
        
                  var clfee =  RawTradesArray[index].substr(153,10);
                 var clfee = parseInt(clfee,10)+parseInt(RawTradesArray[index].substr(163,2),10)/100;
                 if(RawTradesArray[index].substr(165,1)=="D")clfee=-clfee; 
                 tempraw[8]=clfee; 
       
                 tempraw[9]=tradecode;        
      
                 tempraw[11]="";

                    if (typeofTrade == "ST")
                    {
                        tempraw[12] = tempraw[6];
                    }
                    else tempraw[12] = value;
                    tempraw[13]= "";
        
                   result.add(tempraw);
              }
             }      
          }      
     return result;
  }
  */

        private DateTime GetValueDate(XmlNode itemNode)
        {
            if (itemNode.SelectSingleNode("SettlementDate") == null)
            {
                if (itemNode.SelectSingleNode("Product/Expiry") == null)
                {
                    return DateTime.ParseExact(itemNode.SelectSingleNode("ValueDate").InnerText, "yyyyMMdd",
                                               CultureInfo.CurrentCulture);

                }
                else
                {
                    return DateTime.ParseExact(itemNode.SelectSingleNode("Product/Expiry").InnerText, "yyyyMMdd",
                                               CultureInfo.CurrentCulture);
                }
            }
            else
            {
                return DateTime.ParseExact(itemNode.SelectSingleNode("SettlementDate").InnerText, "yyyyMMdd",
                                           CultureInfo.CurrentCulture);
            }
        }

        private string GetTypeOfTradeFromXml(XmlNode itemNode)
        {
            switch (itemNode.SelectSingleNode("Product/ProductGroupName").InnerText)
            {
                case "Equities":
                    return "ST";
                case "Futures":
                    return "FU";
                case "Others":
                    if (itemNode.SelectSingleNode("TransactionOrigin") != null)
                    {
                        if (itemNode.SelectSingleNode("TransactionOrigin").InnerText == "FW-E")
                        {
                            return "FW-E";
                        }
                        return itemNode.SelectSingleNode("TransactionOrigin").InnerText;
                    }
                    else
                    {
                        switch (itemNode.SelectSingleNode("TransactionType").InnerText)
                        {
                            case "FORWARD CONF":
                                return "FW";
                            case "FX CONF":
                                return "FX";
                            case "TRADE":
                                if (itemNode.SelectSingleNode("Depot/DepotId") != null)
                                {
                                    if (itemNode.SelectSingleNode("Depot/DepotId").InnerText == "METALS")
                                    {
                                        return "METALS";
                                        break;
                                    }
                                    return "Others";
                                }
                                else
                                {
                                    return "Others";
                                }
                                break;
                            default:
                                return "Others";
                        }
                    }
                    break;
                default:
                    return itemNode.SelectSingleNode("Product/ProductGroupName").InnerText;
            }
        }

/*
        private string UpdateSymbol(trades,cmap){
   var mappingST = Fn.FilterMatrixEqual(cmap, 4, "STOCK&FX");    
   var mappingFW = Fn.FilterMatrixEqual(cmap, 4,  "FW");
   var mappingFU = Fn.FilterMatrixEqual(cmap, 4,  "FU"); 
   for (var ii =0;ii<mappingFU.length;ii++){ mappingFU[ii][0]=mappingFU[ii][0].concat(Fn.StringFromDate(mappingFU[ii][7])) }
        
   var mapping;
 
  for (var i=0;i<trades.length;i++){
    if(trades[i][10]==""){
      if (trades[i][3]=="FW"){
        mapping = mappingFW;
        var j = Fn.getElementId(mapping, 0, trades[i][2]); 
      }else {
        if(trades[i][3]=="FU"){
          mapping = mappingFU;
          var symbol = trades[i][2];
          var j = Fn.getElementId(mapping, 0, symbol.concat(Fn.StringFromDate(trades[i][4],'-')));
         }
        else {
          mapping = mappingST;
          var j = Fn.getElementId(mapping, 0, trades[i][2]); 
        }
      }
        
       if(j>-1)trades[i][10]=mapping[j][1]
       else {
    //     addnewsymboltoMapping(trades[i][2],trades[i][3]);
         mappingST = Fn.FilterMatrixEqual(cmap, 4,"STOCK&FX");    
         mappingFW = Fn.FilterMatrixEqual(cmap, 4, "FW");
       }
    }
  }
  return trades;
}
*/

        public class Map
        {
            //private string BrockerSymbol { get; set; }
            public string BOSymbol { get; set; }
            public double? MtyPrice { get; set; }
            public double? MtyVolume { get; set; }
            public string Type { get; set; }
            public int? Round { get; set; }
            public DateTime? ValueDate { get; set; }
            public double? Leverage { get; set; }
        }

        private static Dictionary<string, Map> getMap(string brocker)
        {
            var testexample = new EXANTE_Entities(_currentConnection);
            var mapfromDb = from m in testexample.Mappings
                            join c in testexample.Contracts on m.BOSymbol equals c.id
                            where m.Brocker == brocker
                            select new
                                {
                                    m.BrockerSymbol,
                                    m.BOSymbol,
                                    m.MtyPrice,
                                    m.MtyVolume,
                                    m.Type,
                                    m.Round,
                                    c.ValueDate,
                                    c.Leverage
                                };
            var results = new Dictionary<string, Map>();
            var mapfromDblist = mapfromDb.ToList();
            foreach (var item in mapfromDblist)
            {
                var key = item.BrockerSymbol;

                if (brocker != "BO")
                {
                    key = item.BrockerSymbol + item.Type;
                }

                if (item.Type == "FU") key = key + item.ValueDate.Value.ToShortDateString();
                results.Add(key, new Map
                    {
                        BOSymbol = item.BOSymbol,
                        MtyPrice = item.MtyPrice,
                        MtyVolume = item.MtyVolume,
                        Round = item.Round,
                        Type = item.Type,
                        ValueDate = item.ValueDate,
                    });
            }
            return results;
        }

        private void ABNReconButtonClick(object sender, EventArgs e)
        {
            var reportdate = ABNDate.Value; //todo Get report date from xml Processing date
            var testexample = new EXANTE_Entities(_currentConnection);
            var symbolmap = getMap("ABN");
            TradesParserStatus.Text = "Processing";
            DateTime TimeStart = DateTime.Now;
            LogTextBox.AppendText("\r\n" + TimeStart + ": " + "start ABN reconciliation");

            if (noparsingCheckbox.Checked)
            {
                var nextdate = reportdate.AddDays(1);
                var cptradefromDb = from cptrade in testexample.CpTrades
                                    where
                                        cptrade.TypeOfTrade == "01" && cptrade.valid == 1 && cptrade.BrokerId == "ABN" &&
                                        cptrade.ReportDate >= reportdate.Date && cptrade.ReportDate < (nextdate.Date) &&
                                        cptrade.BOTradeNumber == null
                                    select cptrade;
                var cptradelist = cptradefromDb.ToList();
                foreach (CpTrade cpTrade in cptradelist)
                {
                    if (cpTrade.BOSymbol == null)
                    {
                        Map symbolvalue;
                        var key = cpTrade.Symbol + cpTrade.Type;
                        if (cpTrade.Type == "FU") key = key + cpTrade.ValueDate.Value.ToShortDateString();
                        if (symbolmap.TryGetValue(key, out symbolvalue))
                        {
                            cpTrade.BOSymbol = symbolvalue.BOSymbol;
                        }
                        testexample.CpTrades.Attach(cpTrade);
                        testexample.Entry(cpTrade).State = (System.Data.Entity.EntityState) EntityState.Modified;
                    }
                }

                testexample.SaveChanges();
                DateTime TimeStartReconciliation = DateTime.Now;
                AbnRecon(reportdate, cptradelist);
                DateTime TimeEndReconciliation = DateTime.Now;
                LogTextBox.AppendText("\r\n" + TimeEndReconciliation.ToLongTimeString() + ": " +
                                      "Reconciliation completed. Time:" +
                                      (TimeStartReconciliation - TimeEndReconciliation).ToString() + "s");


            }
            else
            {
                var allfromfile = new List<CpTrade>();
                var futtrades = new List<CpTrade>();
                var result = openFileDialog2.ShowDialog();
                if (result == DialogResult.OK)
                {
                    if (CliffCheckBox.Checked)
                    {
                        var cliffdict = LoadCliff(openFileDialog2.FileName, reportdate);
                        List<string> rowlist;
                       DateTime TimeUpdateBalanceStart = DateTime.Now;
                        if (cliffdict.TryGetValue("610", out rowlist)) updateBalance(rowlist, reportdate);
                        DateTime TimeFutureParsing = DateTime.Now;
                        LogTextBox.AppendText("\r\n" + TimeFutureParsing.ToLongTimeString() + ": " +
                                              "Update Balance Completed. Time:" +
                                              (TimeFutureParsing - TimeUpdateBalanceStart).ToString() + "s");
                        
                        if (cliffdict.TryGetValue("310", out rowlist))
                            allfromfile = ExtractTradesFromCliff(rowlist, symbolmap);
                        DateTime TimeStockParsing = DateTime.Now;
                        LogTextBox.AppendText("\r\n" + TimeStockParsing.ToLongTimeString() + ": " +
                                              "Future parsing Completed. Time:" +
                                              (TimeStockParsing - TimeFutureParsing).ToString() + "s");

                        if (cliffdict.TryGetValue("410", out rowlist))
                            allfromfile.AddRange(ExtractTradesFromCliff(rowlist, symbolmap));
                        DateTime TimeOptionParsing = DateTime.Now;
                        LogTextBox.AppendText("\r\n" + TimeOptionParsing.ToLongTimeString() + ": " +
                                              "Stock parsing Completed. Time:" +
                                              (TimeOptionParsing - TimeStockParsing).ToString() + "s");

                        if (cliffdict.TryGetValue("210", out rowlist))
                            allfromfile.AddRange(ExtractOptionTradesFromCliff(rowlist, symbolmap));
                        DateTime TimeEndOptionParsing = DateTime.Now;
                        LogTextBox.AppendText("\r\n" + TimeEndOptionParsing.ToLongTimeString() + ": " +
                                              "Option parsing Completed. Time:" +
                                              (TimeEndOptionParsing - TimeOptionParsing).ToString() + "s");

                    }
                    else
                    {
                        allfromfile = ExtractTradesFromXml(symbolmap);
                    }
                    foreach (CpTrade tradeIndex in allfromfile)
                    {
                        testexample.CpTrades.Add(tradeIndex);
                    }
                    testexample.SaveChanges();
                    allfromfile = allfromfile.Where(s => s.TypeOfTrade == "01").ToList();
                    DateTime TimeStartReconciliation = DateTime.Now;
                    AbnRecon(reportdate, allfromfile);
                    DateTime TimeEndReconciliation = DateTime.Now;
                    LogTextBox.AppendText("\r\n" + TimeEndReconciliation.ToLongTimeString() + ": " +
                                          "Reconciliation completed. Time:" +
                                          (TimeEndReconciliation - TimeStartReconciliation).ToString() + "s");

                }
            }
            TradesParserStatus.Text = "Done";

        }

        private List<CpTrade> ExtractTradesFromXml(Dictionary<string, Map> symbolmap)
        {
            //todo: unzip file
            var doc = new XmlDocument();
            //doc.Load(@"C:\20140214.xml");
            doc.Load(openFileDialog2.FileName);
            var testexample = new EXANTE_Entities(_currentConnection);
            var allfromfile = new List<CpTrade>();
            var cpfromDb = from cp in testexample.counterparties
                           select cp;
            var cpdic = cpfromDb.ToDictionary(k => k.Name, k => k.cp_id);

            //var results = products.ToDictionary(product => product.Id);
            //   var authors = Linkdoc.Root.Elements().Select(x => x.Element("UnsettledMovement"));
            var row = -1;
            {
                //XmlNodeList nodes = doc.SelectNodes("/Transactions/AccountTransactions");
                foreach (XmlNode mainnode in doc.DocumentElement.ChildNodes)
                {
                    //  var test = Mainnode.SelectNodes("UnsettledMovement/MovementCode[@Value = '01']");
                    foreach (XmlNode itemNode in mainnode.SelectNodes("UnsettledMovement"))
                    {
                        var list = itemNode.ChildNodes;
                        var MovementCode = itemNode.SelectSingleNode("MovementCode").InnerText;
                        //    if (new [] {"01", "23", "24"}.Contains(MovementCode)){
                        row++;
                        var Pricemty = 1;
                        /* var selectSingleNode = itemNode.SelectSingleNode("ExchangeFee/Value");
                                 var singleNode = itemNode.SelectSingleNode("ClearingFee/Value"); 
                                 if (itemNode.SelectSingleNode("TransactionPriceCurrency/CurrencyPricingUnit") != null)
                                 {
                                     Pricemty = Convert.ToInt32(itemNode.SelectSingleNode("TransactionPriceCurrency/CurrencyPricingUnit").InnerText);
                                 }*/
                        /*  todo Решить задачу с комиссиями  
                                  var ExchangeFees = selectSingleNode != null && (selectSingleNode.InnerText == "D")
                                                              ? -1*Convert.ToDouble(itemNode.SelectSingleNode("ExchangeFee/Value").InnerText)
                                                              : Convert.ToDouble(itemNode.SelectSingleNode("ExchangeFee/Value").InnerText);
                                       var Fee = singleNode != null && (singleNode.InnerText == "D")
                                                     ? -1*Convert.ToDouble(itemNode.SelectSingleNode("ClearingFee/Value").InnerText)
                                                     : Convert.ToDouble(itemNode.SelectSingleNode("ClearingFee/Value").InnerText)*/
                        var typeOftrade = GetTypeOfTradeFromXml(itemNode);
                        if (typeOftrade == "FW" || typeOftrade == "FX")
                        {
                            if (itemNode.SelectSingleNode("TransactionPriceCurrency/CurrencyPricingUnit") !=
                                null)
                            {
                                Pricemty = 10000/Convert.ToInt32(itemNode.SelectSingleNode(
                                    "TransactionPriceCurrency/CurrencyPricingUnit").InnerText);
                            }
                        }

                        var symbolid = itemNode.SelectSingleNode("Product/Symbol").InnerText + typeOftrade;
                        Map symbolvalue;
                        var bosymbol = "";
                        if (symbolmap.TryGetValue(symbolid, out symbolvalue))
                        {
                            bosymbol = symbolvalue.BOSymbol;
                        }
                        else
                        {
                            bosymbol = "";
                        }


                        allfromfile.Add(new CpTrade
                            {
                                ReportDate =
                                    DateTime.ParseExact(itemNode.SelectSingleNode("ProcessingDate").InnerText,
                                                        "yyyyMMdd", CultureInfo.CurrentCulture),
                                TradeDate = (itemNode.SelectSingleNode("TimeStamp") != null)
                                                ? Convert.ToDateTime(
                                                    itemNode.SelectSingleNode("TimeStamp").InnerText)
                                                : DateTime.ParseExact(
                                                    itemNode.SelectSingleNode("TransactionDate").InnerText,
                                                    "yyyyMMdd", CultureInfo.CurrentCulture),
                                BrokerId = "test",
                                Symbol = itemNode.SelectSingleNode("Product/Symbol").InnerText,
                                Type = typeOftrade,
                                Qty = (itemNode.SelectSingleNode("QuantityShort") == null)
                                          ? Convert.ToInt64(itemNode.SelectSingleNode("QuantityLong").InnerText)
                                          : -1*Convert.ToInt64(itemNode.SelectSingleNode("QuantityShort").InnerText),
                                Price = (itemNode.SelectSingleNode("TransactionPrice") != null)
                                            ? (double)
                                              decimal.Round(
                                                  Convert.ToDecimal(
                                                      itemNode.SelectSingleNode("TransactionPrice").InnerText)/
                                                  Pricemty, 8)
                                            : 0,
                                ValueDate = GetValueDate(itemNode),
                                cp_id =
                                    getCPid(
                                        itemNode.SelectSingleNode("OppositeParty/OppositePartyCode").InnerText,
                                        cpdic),
                                ExchangeFees = 0,
                                Fee = 0,
                                Id = null,
                                BOSymbol = (bosymbol == "") ? null : bosymbol,
                                BOTradeNumber = null,
                                value = (itemNode.SelectSingleNode("EffectiveValue/ValueDC") != null)
                                            ? (itemNode.SelectSingleNode("EffectiveValue/ValueDC").InnerText ==
                                               "D")
                                                  ? -1*
                                                    Convert.ToDouble(
                                                        itemNode.SelectSingleNode("EffectiveValue/Value")
                                                                .InnerText)
                                                  : Convert.ToDouble(
                                                      itemNode.SelectSingleNode("EffectiveValue/Value")
                                                              .InnerText)
                                            : 0,
                                Timestamp = DateTime.UtcNow,
                                valid = 1,
                                username = "xmlparser",
                                //  FullId = null,
                                BOcp = null,
                                exchangeOrderId = null,
                                TypeOfTrade = MovementCode,
                                Comment = (itemNode.SelectSingleNode("TransactionOrigin") != null)
                                              ? itemNode.SelectSingleNode("TransactionOrigin").InnerText
                                              : ""
                            });
                        // var cp_id = itemNode.SelectSingleNode("OppositePartyCode").InnerText;
                        //                       var value = itemNode.SelectSingleNode("").InnerText;
                        //if 01   }
                    }

                    foreach (XmlNode itemNode in mainnode.SelectNodes("FutureMovement"))
                    {
                        var list = itemNode.ChildNodes;
                        var MovementCode = itemNode.SelectSingleNode("MovementCode").InnerText;
                        //  if (new[] { "01", "23", "24" }.Contains(MovementCode)){
                        var Pricemty = 1;
                        var price = Convert.ToDouble(itemNode.SelectSingleNode("TransactionPrice").InnerText)/
                                    Pricemty;
                        var qty = (itemNode.SelectSingleNode("QuantityShort") == null)
                                      ? Convert.ToInt64(itemNode.SelectSingleNode("QuantityLong").InnerText)
                                      : -1*Convert.ToInt64(itemNode.SelectSingleNode("QuantityShort").InnerText);
                        var symbolid = itemNode.SelectSingleNode("Product/Symbol").InnerText + "FU" +
                                       Convert.ToDateTime(GetValueDate(itemNode)).ToShortDateString();
                        Map symbolvalue;
                        var bosymbol = "";
                        if (symbolmap.TryGetValue(symbolid, out symbolvalue))
                        {
                            bosymbol = symbolvalue.BOSymbol;
                        }
                        else
                        {
                            bosymbol = "";
                        }

                        allfromfile.Add(new CpTrade
                            {
                                ReportDate =
                                    DateTime.ParseExact(itemNode.SelectSingleNode("ProcessingDate").InnerText,
                                                        "yyyyMMdd", CultureInfo.CurrentCulture),
                                TradeDate = Convert.ToDateTime(itemNode.SelectSingleNode("TimeStamp").InnerText),
                                BrokerId = "test",
                                Symbol = itemNode.SelectSingleNode("Product/Symbol").InnerText,
                                Type = GetTypeOfTradeFromXml(itemNode),
                                Qty = qty,
                                Price = price,
                                ValueDate = GetValueDate(itemNode),
                                cp_id =
                                    getCPid(
                                        itemNode.SelectSingleNode("OppositeParty/OppositePartyCode").InnerText,
                                        cpdic),
                                ExchangeFees = 0,
                                Fee = 0,
                                Id = null,
                                BOSymbol = bosymbol,
                                BOTradeNumber = null,
                                value =
                                    -Convert.ToInt64(itemNode.SelectSingleNode("Tradingunit").InnerText == "D")*
                                    price*qty,
                                Timestamp = DateTime.UtcNow,
                                valid = 1,
                                username = "xmlparser",
                                //  FullId = null,
                                BOcp = null,
                                exchangeOrderId = null,
                                TypeOfTrade = MovementCode,
                                Comment = (itemNode.SelectSingleNode("TransactionOrigin") != null)
                                              ? itemNode.SelectSingleNode("TransactionOrigin").InnerText
                                              : ""
                            });
                        //if 01   }
                    }
                }
            }
            return allfromfile;
        }

        private Dictionary<string, List<string>> LoadCliff(string fileName, DateTime reportdate)
        {
            var reader = new StreamReader(fileName);
            //     var reader = new StreamReader(@"C:\20140428----1978-------C");
            var lineFromFile = reader.ReadLine();
            if (lineFromFile != null)
            {
                reportdate = (DateTime) getDatefromString(lineFromFile.Substring(6, 8));
            }
            var cliffdict = new Dictionary<string, List<string>>();
            while (!reader.EndOfStream)
            {
                if (lineFromFile != null)
                {
                    var code = lineFromFile.Substring(0, 3);
                    if (cliffdict.ContainsKey(code))
                    {
                        cliffdict[code].Add(lineFromFile);
                    }
                    else cliffdict.Add(code, new List<string> {lineFromFile});
                }
                lineFromFile = reader.ReadLine();
            }
            return cliffdict;
        }

        private static DateTime? getDatefromString(string lineFromFile, bool time = false)
        {
            if ((lineFromFile[0] != ' ') && (lineFromFile[0] != '0'))
            {
                return time
                           ? DateTime.Parse(lineFromFile.Substring(0, 4) + "-" + lineFromFile.Substring(4, 2) + "-" +
                                            lineFromFile.Substring(6, 2) + " " + lineFromFile.Substring(8, 2) + ":" +
                                            lineFromFile.Substring(10, 2) + ":" + lineFromFile.Substring(12, 2))
                           : DateTime.Parse(lineFromFile.Substring(0, 4) + "-" + lineFromFile.Substring(4, 2) + "-" +
                                            lineFromFile.Substring(6, 2));
            }
            else return null;
        }

        private List<CpTrade> ExtractOptionTradesFromCliff(List<string> rowlist, Dictionary<string, Map> symbolmap)
        {
            var allfromfile = new List<CpTrade>();
            var testexample = new EXANTE_Entities(_currentConnection);
            var cpfromDb = from cp in testexample.counterparties
                           select cp;
            var cpdic = cpfromDb.ToDictionary(k => k.Name, k => k.cp_id);
            var reportdate = (DateTime) getDatefromString(rowlist[0].Substring(6, 8));
            foreach (var row in rowlist)
            {
                var code = row.Substring(124, 2);
                var typeoftrade = row.Substring(60, 2);
                var tradedate = getDatefromString(row.Substring(554), true) ??
                                getDatefromString(row.Substring(562), true);
                var symbol = row.Substring(66, 6).Trim();
               var Counterparty = row.Substring(54, 6).Trim();
                var valuedate = getDatefromString(row.Substring(73, 8).Trim());
                var type = row.Substring(72, 1);
                var strike = double.Parse(row.Substring(81, 8) + '.' + row.Substring(89, 7),
                                          CultureInfo.InvariantCulture);
                var volumelong = double.Parse(row.Substring(128, 10) + '.' + row.Substring(138, 2),
                                              CultureInfo.InvariantCulture);
                var volume = volumelong -
                             double.Parse(row.Substring(141, 10) + '.' + row.Substring(151, 2),
                                          CultureInfo.InvariantCulture);
                var price = double.Parse(row.Substring(247, 8) + '.' + row.Substring(255, 7),
                                         CultureInfo.InvariantCulture);

                Map symbolvalue;
                double? MtyVolume = 1;
                double? MtyPrice = 1;
                

                if (symbolmap.TryGetValue(symbol + "OP", out symbolvalue))
                {
                    MtyVolume = symbolvalue.MtyVolume;
                    MtyPrice = symbolvalue.MtyPrice;
                    //     BoSymbol = symbolvalue.BOSymbol + "." + getLetterOfMonth(valuedate.Value.Month) + valuedate.Value.Year + "." + type + strike * MtyPrice;
                }
                var symbol_id = symbol + "." + type + strike ;

                var exchfee = double.Parse(row.Substring(153, 10) + '.' + row.Substring(163, 2),
                                           CultureInfo.InvariantCulture);
                if (row.Substring(165, 1) == "D") exchfee = -exchfee;
                var exchfeeccy = row.Substring(166, 3);

                var fee = double.Parse(row.Substring(169, 10) + '.' + row.Substring(179, 2),
                                       CultureInfo.InvariantCulture);
                if (row.Substring(181, 1) == "D") fee = -fee;
                var clearingfeeccy = row.Substring(182, 3);

                allfromfile.Add(new CpTrade
                    {
                        ReportDate = reportdate,
                        TradeDate = tradedate,
                        BrokerId = "ABN",
                        Symbol = symbol_id,
                        Type = typeoftrade,
                        Qty = volume*MtyVolume,
                        Price = price,// * MtyPrice,
                        ValueDate = valuedate,
                        cp_id = getCPid(Counterparty, cpdic),
                        ExchangeFees = exchfee,
                        Fee = fee,
                        Id = null,
                        BOSymbol = null,
                        BOTradeNumber = null,
                        value = null,
                        Timestamp = DateTime.UtcNow,
                        valid = 1,
                        username = "cliffparser",
                        //  FullId = null,
                        BOcp = null,
                        exchangeOrderId = null,
                        TypeOfTrade = code,
                        Comment = null,
                        ExchFeeCcy = exchfeeccy,
                        ClearingFeeCcy = clearingfeeccy,
                        ccy = row.Substring(121, 3)
                    });

            }
            return allfromfile;
        }

        private static string getLetterOfMonth(int month)
        {
            switch (month)
            {
                case 1:
                    return "F";
                    break;
                case 2:
                    return "G";
                    break;
                case 3:
                    return "H";
                    break;
                case 4:
                    return "J";
                    break;
                case 5:
                    return "K";
                    break;
                case 6:
                    return "M";
                    break;
                case 7:
                    return "N";
                    break;
                case 8:
                    return "Q";
                    break;
                case 9:
                    return "U";
                    break;
                case 10:
                    return "V";
                    break;
                case 11:
                    return "X";
                    break;
                case 12:
                    return "Z";
                    break;
                default:
                    return "";
            }
        }


        private List<CpTrade> ExtractTradesFromCliff(List<string> rowlist, Dictionary<string, Map> symbolmap)
        {
            var allfromfile = new List<CpTrade>();
            var testexample = new EXANTE_Entities(_currentConnection);
            var cpfromDb = from cp in testexample.counterparties
                           select cp;
            var cpdic = cpfromDb.ToDictionary(k => k.Name, k => k.cp_id);
            var reportdate = (DateTime) getDatefromString(rowlist[0].Substring(6, 8));
            foreach (var row in rowlist)
            {
                var typeoftrade = row.Substring(60, 2);
                var tradedate = getDatefromString(row.Substring(582), true) ??
                                getDatefromString(row.Substring(295), true);
                var symbol = row.Substring(66, 6).Trim();
                var type = row.Substring(60, 2);
                if (row.Substring(405, 4) == "FW-E")
                {
                    type = "FW-E";
                }

                Map symbolvalue;
                double? MtyVolume = 1;
                double? MtyPrice = 1;
                string BoSymbol = null;
                int round = 10;
                var symbol_id = symbol + type;
                var valuedate = getDatefromString(row.Substring(303)) ?? getDatefromString(row.Substring(72));

                if (typeoftrade == "FU")
                {
                    symbol_id = symbol_id + Convert.ToDateTime(valuedate).ToShortDateString();
                }

                if (symbolmap.TryGetValue(symbol_id, out symbolvalue))
                {
                    MtyVolume = symbolvalue.MtyVolume;
                    MtyPrice = symbolvalue.MtyPrice;
                    BoSymbol = symbolvalue.BOSymbol;
                    round = (int) symbolvalue.Round;

                }

                var exchfee = double.Parse(row.Substring(137, 10) + '.' + row.Substring(147, 2),
                                           CultureInfo.InvariantCulture);
                if (row.Substring(149, 1) == "D") exchfee = -exchfee;
                var exchfeeccy = row.Substring(150, 3);

                var fee = double.Parse(row.Substring(153, 10) + '.' + row.Substring(163, 2),
                                       CultureInfo.InvariantCulture);
                if (row.Substring(165, 1) == "D") fee = -fee;
                var clearingfeeccy = row.Substring(166, 3);
                double value;
                double transacPrice;
                if (typeoftrade != "FU")
                {
                    value = double.Parse(row.Substring(276, 16) + '.' + row.Substring(292, 2),
                                         CultureInfo.InvariantCulture);
                    if (row.Substring(294, 1) == "D") value = -value;
                    transacPrice =
                        Math.Round(
                            double.Parse(row.Substring(360, 8) + "." + row.Substring(368, 7),
                                         CultureInfo.InvariantCulture)*(double) MtyPrice, round);
                }
                else
                {
                    transacPrice =
                        Math.Round(
                            double.Parse(row.Substring(230, 8) + "." + row.Substring(238, 7),
                                         CultureInfo.InvariantCulture)*(double) MtyPrice, round);
                    value = -Math.Round(GetValueFromCliff(row.Substring(112))*(double) MtyVolume*transacPrice, 10);
                }
                string Id = null;
                /*   if (type == "FW")
        {
            BoSymbol = BoSymbol + valuedate.Value.ToShortDateString();
            Id = BoSymbol + (GetValueFromCliff(row.Substring(112)) * MtyVolume).ToString() + transacPrice.ToString();
        }*/

                allfromfile.Add(new CpTrade
                    {
                        ReportDate = reportdate,
                        TradeDate = typeoftrade == "FU"
                                        ? getDatefromString(row.Substring(496), true)
                                        : getDatefromString(row.Substring(582), true) ??
                                          getDatefromString(row.Substring(295), true),
                        BrokerId = "ABN",
                        Symbol = symbol,
                        Type = (row.Substring(405, 4) == "FW-E")
                                   ? "FW-E"
                                   : type,
                        Qty = GetValueFromCliff(row.Substring(112))*MtyVolume,
                        Price = transacPrice,
                        ValueDate = valuedate,
                        cp_id = getCPid(row.Substring(54, 6).Trim(), cpdic),
                        ExchangeFees = exchfee,
                        Fee = fee,
                        Id = Id,
                        BOSymbol = BoSymbol,
                        BOTradeNumber = null,
                        value = value,
                        Timestamp = DateTime.UtcNow,
                        valid = 1,
                        username = "cliffparser",
                        //  FullId = null,
                        BOcp = null,
                        exchangeOrderId = null,
                        TypeOfTrade = row.Substring(108, 2),
                        Comment = null,
                        ExchFeeCcy = exchfeeccy,
                        ClearingFeeCcy = clearingfeeccy,
                        ccy = row.Substring(105, 3)
                    });

            }
            return allfromfile;
        }

        private static double GetValueFromCliff(string row)
        {
            var volumelong = double.Parse(row.Substring(0, 10) + "." + row.Substring(10, 2),
                                          CultureInfo.InvariantCulture);
            var volumeshort = row.Substring(13, 10);
            var resvolume = volumelong -
                            double.Parse(row.Substring(13, 10) + "." + row.Substring(23, 2),
                                         CultureInfo.InvariantCulture);
            return resvolume;
        }

        private void updateBalance(List<string> rowlist, DateTime reportdate)
        {
            var dbentity = new EXANTE_Entities(_currentConnection);
            var cpidfromDb = from cp in dbentity.DailyChecks
                             where cp.Table == "Daily" && cp.date == reportdate
                             select cp.status;
            var listforDb = new List<ABN_cashposition>();
            foreach (var row in rowlist)
            {
                var value = row.Substring(90, 18);
                value = value.Substring(0, value.Count() - 2) + "." + value.Substring(value.Count() - 2, 2);
                dbentity.ABN_cashposition.Add(new ABN_cashposition
                    {
                        ReportDate = reportdate,
                        Currency = row.Substring(54, 3),
                        Value = row[108] != 'C'
                                    ? -1*double.Parse(value, CultureInfo.InvariantCulture)
                                    : double.Parse(value, CultureInfo.InvariantCulture),
                        valid = 1,
                        User = "parser",
                        TimeStamp = DateTime.Now,
                        Description = row.Substring(109, 40).Trim()
                    });
            }
            dbentity.SaveChanges();
            /*     dbentity.DailyChecks.Add(new DailyCheck
                  {
                    cp_id = null,
                    date = reportdate,
                    status = "ok",
                    user = "parser",
                    valid = true,
                    timestamp =DateTime.Now,
                    Table = "ABN_cashposition"
                   });
           dbentity.SaveChanges();*/
        }

        public static void Log(string message)
        {
            DateTime timestamp = DateTime.Now;
            File.AppendAllText("log_" + timestamp.ToShortDateString() + ".txt",
                               timestamp.ToShortDateString() + " " + message);
        }

        private int? getCPid(string cpname, Dictionary<string, int> cpdic)
        {
            if (cpname != null)
            {
                int cp_id;
                if (cpdic.TryGetValue(cpname, out cp_id))
                {
                    return cp_id;
                }
                else
                {
                    var dbentity = new EXANTE_Entities(_currentConnection);
                    dbentity.counterparties.Add(new counterparty
                        {Name = cpname});
                    dbentity.SaveChanges();
                    var cpidfromDb = from cp in dbentity.counterparties
                                     where cp.Name == cpname
                                     select cp.cp_id;
                    cpdic.Add(cpname, cpidfromDb.First());
                    return cpidfromDb.First();
                }
            }
            else
            {
                Log("Нет идентификатора counterparty");
                return 0;
            }

        }

        private List<Reconcilation> Reconciliation(List<CpTrade> cpTrades, Dictionary<string, List<BOtrade>> botrades,
                                                   string cpColumn, string BOCp)
        {
            var prop_cpTrades = typeof (CpTrade).GetProperty(cpColumn);
            //var prop_boTrades = typeof (Ctrade).GetProperty(boColumn);
            var recon = new List<Reconcilation>();
            for (var i = 0; i < cpTrades.Count; i++)
            {
                var value = (string) prop_cpTrades.GetValue(cpTrades[i], null);
                List<BOtrade> boitemlist;
                if (botrades.TryGetValue(value, out boitemlist))
                {
                    int iBoitemlist = 0;
                    bool found = false;
                    while ((iBoitemlist < boitemlist.Count) && (!found))
                    {
                        if ((boitemlist[iBoitemlist].Price.Equals(cpTrades[i].Price)) &&
                            (boitemlist[iBoitemlist].Qty.Equals(cpTrades[i].Qty)) &&
                            (!boitemlist[iBoitemlist].RecStatus))
                        {
                            found = true;
                        }
                        else iBoitemlist++;
                    }
                    if (found)
                    {
                        cpTrades[i].BOTradeNumber = boitemlist[iBoitemlist].TradeNumber.ToString();
                        cpTrades[i].BOSymbol = boitemlist[iBoitemlist].symbol;
                        cpTrades[i].BOcp = BOCp;
                        cpTrades[i].Id = boitemlist[iBoitemlist].ctradeid.ToString();
                        recon.Add(new Reconcilation
                            {
                                CpTrade_id = i,
                                Ctrade_id = boitemlist[iBoitemlist].TradeNumber,
                                Timestamp = DateTime.UtcNow,
                                username = "TradeParser",
                                valid = 1
                            });
                        boitemlist[iBoitemlist].RecStatus = true;
                    }

                }
            }
            return recon;
            //    boTrades.Find(x => (string) prop_boTrades.GetPage(x, null) == value);
        }

        //        public int Method(Bar bar, string propertyName)
        // var prop = typeof(Bar).GetProperty(propertyName);
        //   int value = (int)prop.GetPage(bar,null);
        public class BOtrade
        {
            public long TradeNumber;
            public double Qty;
            public Double Price;
            public string symbol;
            public long ctradeid;
            public Boolean RecStatus;
        }

        private void button2_Click(object sender, EventArgs e)
        {
            if (openFileDialog1.ShowDialog() == DialogResult.OK)
            {
                //Создаём приложение.
                TradesParserStatus.Text = "Processing";
                Microsoft.Office.Interop.Excel.Application ObjExcel = new Microsoft.Office.Interop.Excel.Application();
                //Открываем книгу.                                                                                                                                                        
                Microsoft.Office.Interop.Excel.Workbook ObjWorkBook = ObjExcel.Workbooks.Open(openFileDialog1.FileName,
                                                                                              0, false, 5, "", "", false,
                                                                                              Microsoft.Office.Interop
                                                                                                       .Excel.XlPlatform
                                                                                                       .xlWindows, "",
                                                                                              true, false, 0, true,
                                                                                              false, false);
                //Выбираем таблицу(лист).
                Microsoft.Office.Interop.Excel.Worksheet ObjWorkSheet;
                ObjWorkSheet =
                    (Microsoft.Office.Interop.Excel.Worksheet) ObjWorkBook.Sheets["Derivative Trades_Деривативы"];
                Microsoft.Office.Interop.Excel.Range xlRange = ObjWorkSheet.UsedRange;

                int rowCount = xlRange.Rows.Count + 1;
                int colCount = xlRange.Columns.Count;
                DateTime reportdate = DateTime.FromOADate(xlRange.Cells[3, 8].value2);
                // reportdate = reportdate.AddDays(-1);
                var testexample = new EXANTE_Entities(_currentConnection);
                var nextdate = Fortsnextday.Value.AddDays(1);
                var queryable =
                    from ct in testexample.Ctrades
                    where ct.Date >= reportdate && ct.Date < (nextdate) && ct.cp_id == "FORTS_TR"
                    select new {ct.trade_id, ct.tradeNumber, ct.qty, ct.price, ct.symbol_id, ct.fullid, ct.RecStatus};
                var botrades = new Dictionary<string, List<BOtrade>>();
                var n = queryable.Count();
                foreach (var ctrade in queryable)
                {
                    var ctrade_id = ctrade.trade_id.Replace("DC:F:", "");
                    var tempBotrade = new BOtrade
                        {
                            TradeNumber = (long) ctrade.tradeNumber,
                            Qty = (double) ctrade.qty,
                            Price = (double) ctrade.price,
                            symbol = ctrade.symbol_id,
                            ctradeid = ctrade.fullid,
                            RecStatus = ctrade.RecStatus
                        };

                    if (botrades.ContainsKey(ctrade_id))
                    {
                        botrades[ctrade_id].Add(tempBotrade);
                    }
                    else botrades.Add(ctrade_id, new List<BOtrade> {tempBotrade}); //tempBotrade});
                }

                var allfromfile = new List<CpTrade>();
                for (int i = 10; i < rowCount; i++)
                {
                    if (xlRange.Cells[i, 4].value2 != null)
                    {
                        var tradeDate = DateTime.FromOADate(xlRange.Cells[i, 4].value2);
                        if (tradeDate.Date == reportdate.Date)
                        {
                            var time = DateTime.FromOADate(xlRange.Cells[i, 5].value2);
                            var ts = new TimeSpan(time.Hour, time.Minute, time.Second);
                            tradeDate = tradeDate.Date + ts;
                            allfromfile.Add(new CpTrade
                                {
                                    ReportDate = reportdate,
                                    TradeDate = tradeDate,
                                    BrokerId = "Aton",
                                    Symbol = xlRange.Cells[i, 10].value2,
                                    Type = "FUTURES",
                                    Qty = xlRange.Cells[i, 6].value2.IndexOf("Buy") == -1
                                              ? Convert.ToInt64(xlRange.Cells[i, 11].value2)*(-1)
                                              : Convert.ToInt64(xlRange.Cells[i, 11].value2),
                                    Price = xlRange.Cells[i, 12].value2,
                                    ValueDate = null,
                                    cp_id = 2,
                                    ExchangeFees = xlRange.Cells[i, 19].value2 - xlRange.Cells[i, 16].value2,
                                    Fee = 0,
                                    Id = null,
                                    BOSymbol = null,
                                    BOTradeNumber = null,
                                    value = xlRange.Cells[i, 16].value2,
                                    Timestamp = DateTime.UtcNow,
                                    valid = 1,
                                    username = "tradesparser",
                                    //  FullId = null,
                                    BOcp = null,
                                    exchangeOrderId = Convert.ToString(xlRange.Cells[i, 2].value2)
                                });
                        }
                    }
                }

                var recon = Reconciliation(allfromfile, botrades, "exchangeOrderId", "2");

                foreach (var botrade in botrades)
                {
                    foreach (var botradeItemlist in botrade.Value)
                    {
                        if (botradeItemlist.RecStatus)
                        {
                            using (var data = new EXANTE_Entities(_currentConnection))
                            {
                                data.Database.ExecuteSqlCommand(
                                    "UPDATE Ctrades Set RecStatus ={0}  WHERE fullid = {1}", true,
                                    botradeItemlist.ctradeid);
                            }
                        }
                    }
                }
                foreach (CpTrade tradeIndex in allfromfile)
                {
                    testexample.CpTrades.Add(tradeIndex);
                }
                testexample.SaveChanges();

                foreach (Reconcilation reconitem in recon)
                {
                    reconitem.CpTrade_id = allfromfile[(int) reconitem.CpTrade_id].FullId;
                    testexample.Reconcilations.Add(reconitem);
                }
                testexample.SaveChanges();
                testexample.Dispose();
                ObjExcel.Quit();
                TradesParserStatus.Text = "Done:" + openFileDialog1.FileName;
            }
        }

        private void button3_Click(object sender, EventArgs e)
        {
            DialogResult result = openFileDialog2.ShowDialog();
            if (result == DialogResult.OK) // Test result.
            {
                var testexample = new EXANTE_Entities(_currentConnection);
                var reader = new StreamReader(openFileDialog2.FileName);
                var allfromfile = new List<CpTrade>();
                //Ticket Ref	Party	Type	Symbol	B/S	Amount	Currency	Rate	Counter Amount	Currency	Tenor	Value Date	Ticket Creation	Order Ref	GRID
                //EOD SWAP 201311190000/1127 FAR LEG	60002000000		NZDUSD	Sell	15 857.00	NZD	0.83218	13 195.88	USD	SPOT	21/11/2013	19/11/2013 06:18:55		
                var lineFromFile = reader.ReadLine();
                TradesParserStatus.Text = "Processing";
                var reportDate = openFileDialog2.FileName.Substring(openFileDialog2.FileName.IndexOf("_") + 1,
                                                                    openFileDialog2.FileName.LastIndexOf("-") -
                                                                    openFileDialog2.FileName.IndexOf("_") - 1);
                int idTradeDate = 13,
                    idSymbol = 3,
                    idQty = 5,
                    idSide = 4,
                    idPrice = 7,
                    idValueDate = 12,
                    idValue = 9,
                    idType = 11;
                IFormatProvider theCultureInfo = new System.Globalization.CultureInfo("en-GB", true);
                var minDate = Convert.ToDateTime(reportDate);
                while (!reader.EndOfStream)
                {
                    lineFromFile = reader.ReadLine().Replace("\"", "");
                    var rowstring = lineFromFile.Split(',');
                    if (rowstring[1] != "")
                    {
                        var tradedate = Convert.ToDateTime(rowstring[idTradeDate], theCultureInfo);
                        var qty = rowstring[idSide].IndexOf("Buy") == -1
                                      ? Convert.ToDouble(rowstring[idQty].Replace(" ", ""))*(-1)
                                      : Convert.ToDouble(rowstring[idQty].Replace(" ", ""));
                        var ValueDate = Convert.ToDateTime(rowstring[idValueDate], theCultureInfo);
                        allfromfile.Add(new CpTrade
                            {
                                ReportDate = Convert.ToDateTime(reportDate),
                                TradeDate = tradedate,
                                BrokerId = "ADSSOREX",
                                Symbol = rowstring[idSymbol],
                                Type = rowstring[idType],
                                Qty = qty,
                                Price = Convert.ToDouble(rowstring[idPrice].Replace(" ", "")),
                                ValueDate = Convert.ToDateTime(rowstring[idValueDate], theCultureInfo),
                                cp_id = 19,
                                ExchangeFees = null,
                                Fee = null,
                                Id = null,
                                BOSymbol = null,
                                BOTradeNumber = null,
                                value = Convert.ToDouble(rowstring[idValue].Replace(" ", "")),
                                Timestamp = DateTime.UtcNow,
                                valid = 1,
                                username = "tradesparser",
                                //  FullId = null,
                                BOcp = null,
                                exchangeOrderId =
                                    rowstring[idSymbol] + qty.ToString() + rowstring[idPrice].Replace(" ", "")
                            });

                        if ((rowstring[idType] == "Spot") && (tradedate < minDate)) minDate = tradedate;

                    }
                }
                var nextdate = Convert.ToDateTime(reportDate);
                var startdate = new DateTime(minDate.Year, minDate.Month, minDate.Day, 0, 0, 0);
                var queryable =
                    from ct in testexample.Ctrades
                    where ct.Date >= startdate && ct.Date < (nextdate) && ct.cp_id == "ADSS_V2"
                    select new {ct.trade_id, ct.tradeNumber, ct.qty, ct.price, ct.symbol_id, ct.fullid, ct.RecStatus};
                var botrades = new Dictionary<string, List<BOtrade>>();
                var n = queryable.Count();
                foreach (var ctrade in queryable)
                {
                    var ctrade_id = ctrade.symbol_id.Replace(".EXANTE", "") + ctrade.qty.ToString() +
                                    ctrade.price.ToString();
                    ctrade_id = ctrade_id.Replace("/", "");

                    var tempBotrade = new BOtrade
                        {
                            TradeNumber = (long) ctrade.tradeNumber,
                            Qty = (double) ctrade.qty,
                            Price = (double) ctrade.price,
                            symbol = ctrade.symbol_id,
                            ctradeid = ctrade.fullid,
                            RecStatus = ctrade.RecStatus
                        };

                    if (botrades.ContainsKey(ctrade_id))
                    {
                        botrades[ctrade_id].Add(tempBotrade);
                    }
                    else botrades.Add(ctrade_id, new List<BOtrade> {tempBotrade}); //tempBotrade});
                }
                var recon = Reconciliation(allfromfile, botrades, "exchangeOrderId", "2");

                foreach (var botrade in botrades)
                {
                    foreach (var botradeItemlist in botrade.Value)
                    {
                        if (botradeItemlist.RecStatus)
                        {
                            using (var data = new EXANTE_Entities(_currentConnection))
                            {
                                data.Database.ExecuteSqlCommand(
                                    "UPDATE Ctrades Set RecStatus ={0}  WHERE fullid = {1}", true,
                                    botradeItemlist.ctradeid);
                            }
                        }
                    }
                }
                foreach (CpTrade tradeIndex in allfromfile)
                {
                    testexample.CpTrades.Add(tradeIndex);
                }
                testexample.SaveChanges();

                foreach (Reconcilation reconitem in recon)
                {
                    reconitem.CpTrade_id = allfromfile[(int) reconitem.CpTrade_id].FullId;
                    testexample.Reconcilations.Add(reconitem);
                }
                testexample.SaveChanges();
            }
        }

        private void button4_Click(object sender, EventArgs e)
        {
            DialogResult result = openFileDialog2.ShowDialog();
            if (result == DialogResult.OK) // Test result.
            {
                var testexample = new EXANTE_Entities(_currentConnection);
                var reader = new StreamReader(openFileDialog2.FileName);
                var allfromfile = new List<CpTrade>();
                var lineFromFile = reader.ReadLine();
                TradesParserStatus.Text = "Processing";
                var reportDate = openFileDialog2.FileName.Substring(openFileDialog2.FileName.IndexOf("_") + 1,
                                                                    openFileDialog2.FileName.LastIndexOf("-") -
                                                                    openFileDialog2.FileName.IndexOf("_") - 1);
                int idTradeDate = 13,
                    idSymbol = 4,
                    idQty = 6,
                    idSide = 5,
                    idPrice = 8,
                    idValueDate = 12,
                    idValue = 9;
                IFormatProvider theCultureInfo = new System.Globalization.CultureInfo("en-GB", true);
                while (!reader.EndOfStream)
                {
                    lineFromFile = reader.ReadLine().Replace("\"", "");
                    var rowstring = lineFromFile.Split(Delimiter);
                    if (rowstring[1] != "")
                    {
                        allfromfile.Add(new CpTrade
                            {
                                ReportDate = Convert.ToDateTime(reportDate),
                                TradeDate = Convert.ToDateTime(rowstring[idTradeDate], theCultureInfo),
                                BrokerId = "ADSSOREX",
                                Symbol = rowstring[idSymbol],
                                Type = "FX",
                                Qty = rowstring[idSide].IndexOf("Buy") == -1
                                          ? Convert.ToDouble(rowstring[idQty].Replace(" ", ""))*(-1)
                                          : Convert.ToDouble(rowstring[idQty].Replace(" ", "")),
                                Price = Convert.ToDouble(rowstring[idPrice].Replace(" ", "")),
                                ValueDate = Convert.ToDateTime(rowstring[idValueDate], theCultureInfo),
                                cp_id = 19,
                                ExchangeFees = null,
                                Fee = null,
                                Id = null,
                                BOSymbol = null,
                                BOTradeNumber = null,
                                value = Convert.ToDouble(rowstring[idValue].Replace(" ", "")),
                                Timestamp = DateTime.UtcNow,
                                valid = 1,
                                username = "tradesparser",
                                //  FullId = null,
                                BOcp = null,
                                exchangeOrderId = null
                            });
                    }
                }
                foreach (CpTrade tradeIndex in allfromfile)
                {
                    testexample.CpTrades.Add(tradeIndex);
                }
                testexample.SaveChanges();

            }
        }


     private string getHTML(string urlAddress){
         urlAddress = "http://google.com";
         HttpWebRequest request = (HttpWebRequest) WebRequest.Create(urlAddress);
         HttpWebResponse response = (HttpWebResponse) request.GetResponse();
        if ( response.StatusCode ==HttpStatusCode.OK){
            Stream receiveStream = response.GetResponseStream();
            StreamReader readStream = null;
            if (response.CharacterSet == null) readStream = new StreamReader(receiveStream);
            else readStream = new StreamReader(receiveStream, Encoding.GetEncoding(response.CharacterSet));
            string data = readStream.ReadToEnd();
            response.Close();
            readStream.Close();
            return data;
        } 
       else return "";
     }

    private void UpdatungViewCpTrades(object sender, EventArgs e)
        {
            var reportdate = ABNDate.Value;
            var prevreportdate = reportdate.AddDays(-3);
            var ts = new TimeSpan(20, 00, 0);
            prevreportdate = prevreportdate.Date + ts;
            var testexample = new EXANTE_Entities(_currentConnection);
            var cplist = new List<string> { "LEK", "CQG", "FASTMATCH", "CURRENEX", "EXANTE", "" };
          //  var symbolmap = getMap("ABN");
            TradesParserStatus.Text = "Processing";
            DateTime TimeStart = DateTime.Now;
            LogTextBox.AppendText(TimeStart+ ": " +"Preparing ABN View");
           
            var nextdate = reportdate.AddDays(1);
            var cptradefromDb = from cptrade in testexample.CpTrades
                                where cptrade.valid == 1 && cptrade.BrokerId=="ABN" && cptrade.ReportDate >= reportdate.Date && cptrade.ReportDate < (nextdate.Date) 
                                select cptrade;
            var cptradelist = cptradefromDb.ToList();
         //   var boTradeslist = CreateIdForBoTrades(getTradesFromDB(reportdate, cplist, true));
       //     var numberBoTrades = boTradeslist.Count;
        //    var symbolMap = getSymbolMap("ABN");
            var cpmappings = GetCPmapping();
            var contractdetailstable = getContractDetails();
         //   List<ABNReconResult> updatelist = null;
            var updatelist = new List<ABNReconResult>();
            var queryable = from ct in testexample.Ctrades
                        where ct.valid == 1 && ct.BOtradeTimestamp >= prevreportdate && ct.Date < (nextdate.Date)
                        select ct;
            var boTradeslist= queryable.ToDictionary(k => k.tradeNumber, k => k);
     
         
            foreach (CpTrade cpTrade in cptradelist)
            {
                string cpname;
                if (!cpmappings.TryGetValue((int) cpTrade.cp_id, out cpname))
                {
                    LogTextBox.AppendText("\r\n" +"There is no counterparty for this id");
                }
                Contract contractDetails=null;
                double leverage = 1;
                if ((cpTrade.BOSymbol == null) ||(!contractdetailstable.TryGetValue(cpTrade.BOSymbol, out contractDetails)))
                {
                    LogTextBox.AppendText("\r\n" + "There is no id in contracts for " + cpTrade.Symbol+" "+cpTrade.Type+" "+cpTrade.TypeOfTrade +" "+ cpTrade.FullId);
                }
                else leverage = (double) contractDetails.Leverage;
                string account = null;
                double bosum = 0;
                string ccy=null;
                if (cpTrade.BOTradeNumber != null)
                {
                    var BOTrNrs = cpTrade.BOTradeNumber.Split(';');
                    Ctrade ctradevalue;
                    foreach (string boTrNr in BOTrNrs)
                    {
                        var currenttradenumber = Convert.ToInt64(boTrNr);
                        if (!boTradeslist.TryGetValue(currenttradenumber, out ctradevalue))
                        {
                            LogTextBox.AppendText("\r\n" + "Didn't find Ctrade with tradenumber = "+currenttradenumber.ToString());
                        }

                        /*var ctradefromDb = from ctrade in testexample.Ctrades
                                           where ctrade.valid == 1 && ctrade.tradeNumber == currenttradenumber
                                           // && ctrade.Date >= reportdate.Date && cptrade.ReportDate < (nextdate.Date)
                                            select ctrade;
                        ctradevalue = ctradefromDb.FirstOrDefault();*/
                        if (account == null)
                        {
                            account = ctradevalue.account_id;
                        }
                        else
                        {
                            if (account != ctradevalue.account_id)
                            {

                                LogTextBox.AppendText("\r\n" + "Accounts are different for cptrade.fullid=" + cpTrade.FullId);
                            }
                      
                        }
                        bosum = (double) (bosum + ctradevalue.fees);
                        ccy = ctradevalue.currency;
                    }
                    
                }
              updatelist.Add(new ABNReconResult
                    {
                        ReportDate = (DateTime) cpTrade.ReportDate,
                        TradeDate = cpTrade.TradeDate,
                        Symbol = cpTrade.Symbol,
                        TYPE = cpTrade.Type,
                        Qty = cpTrade.Qty,
                        Price = cpTrade.Price,
                        ValueDate = cpTrade.ValueDate,
                        ABN_cp = cpname,
                        BOSymbol = cpTrade.BOSymbol,
                        BOTradeNumber = cpTrade.BOTradeNumber,
                        BOcp = cpTrade.BOcp,
                        Mty = leverage,
                        Value = -leverage*cpTrade.Price*cpTrade.Qty,
                        BODate = cpTrade.TradeDate,
                        TypeOfTrade = cpTrade.TypeOfTrade,
                        COMMENT = cpTrade.Comment,
                        ExchFee = cpTrade.ExchangeFees,
                        ExchFeeCcy = cpTrade.ExchFeeCcy,
                        ClearFee = cpTrade.Fee,
                        ClearingFeeCcy = cpTrade.ClearingFeeCcy,
                        fullid = cpTrade.FullId,
                        BOfee = bosum, // todo calculate from join
                        BOCurrency = ccy, // todo calculate from join
                        BOAccount = account // todo calculate from join
                    });
            }
        if (updatelist!=null)
        {
             var listtodelete = from recon in testexample.ABNReconResults
                                where recon.ReportDate >= reportdate.Date && recon.ReportDate < nextdate.Date
                                select recon;
       //     var county = listtodelete.ToList();
            testexample.ABNReconResults.RemoveRange(listtodelete);
            testexample.SaveChanges();
            foreach (ABNReconResult reconResult in updatelist)
             {
                 testexample.ABNReconResults.Add(reconResult);
            }
            testexample.SaveChanges();
        }
        DateTime TimeEndUpdating = DateTime.Now;
        LogTextBox.AppendText("\r\n" + TimeEndUpdating.ToLongTimeString() + ": " +
                              "Updating completed. Time:" +
                              (TimeEndUpdating - TimeStart).ToString());

        }

        private Dictionary<string,Contract> getContractDetails()
        {
            var testexample = new EXANTE_Entities(_currentConnection);
            var cpfromDb = from cp in testexample.Contracts
                           select cp;
            return cpfromDb.ToDictionary(k => k.id, k => k);
        }

        private void runforall()
        {
           var reportdate = ABNDate.Value;
            var listoffile = new List<string>
                {
                    "C:\\EXANTE\\20131202----1978-------C",
                    "C:\\EXANTE\\20131203----1978-------C",
                    "C:\\EXANTE\\20131204----1978-------C",
                    "C:\\EXANTE\\20131205----1978-------C",
                    "C:\\EXANTE\\20131206----1978-------C",
                    "C:\\EXANTE\\20131209----1978-------C",
                    "C:\\EXANTE\\20131210----1978-------C",
                    "C:\\EXANTE\\20131211----1978-------C",
                    "C:\\EXANTE\\20131212----1978-------C",
                    "C:\\EXANTE\\20131213----1978-------C",                  
                    "C:\\EXANTE\\20131216----1978-------C",
                    "C:\\EXANTE\\20131217----1978-------C",
                    "C:\\EXANTE\\20131218----1978-------C",
                    "C:\\EXANTE\\20131219----1978-------C",
                    "C:\\EXANTE\\20131220----1978-------C",
                    "C:\\EXANTE\\20131223----1978-------C",
                    "C:\\EXANTE\\20131224----1978-------C",
                    "C:\\EXANTE\\20131226----1978-------C",
                    "C:\\EXANTE\\20131227----1978-------C",
                    "C:\\EXANTE\\20131230----1978-------C",
                    "C:\\EXANTE\\20131231----1978-------C"
                    
                };
            foreach (string filename in listoffile)
            {
                var cliffdict = LoadCliff(filename, reportdate);
                /*  var dbentity = new EXANTE_Entities(_currentConnection);
                  var testdate = reportdate.ToShortDateString();
                  var cpidfromDb = from cp in dbentity.DailyChecks
                                   where cp.Table == "FT" && cp.date.ToString() == testdate
                                   select cp.status;*/
                List<string> rowlist;
                DateTime TimeUpdateBalanceStart = DateTime.Now;
                LogTextBox.AppendText("\r\n" + TimeUpdateBalanceStart + ": " + "start FT parsing reconciliation");
                if (cliffdict.TryGetValue("600", out rowlist))
                {
                    reportdate = getcashmovements(rowlist);
                }
                DateTime TimeFutureParsing = DateTime.Now;
                LogTextBox.AppendText("\r\n" + TimeFutureParsing.ToLongTimeString() + ": " + "FT parsing completed for " +
                                      reportdate.ToShortDateString() + ". Time:" +
                                      (TimeFutureParsing - TimeUpdateBalanceStart).ToString() + "s");

            }
        }

        private void button5_Click(object sender, EventArgs e)
        {
            //  runforall(); 
            var result = openFileDialog2.ShowDialog();
            if (result == DialogResult.OK)
            {
                foreach (string oFilename in openFileDialog2.FileNames)
                {
                    var reportdate = ABNDate.Value;

                    var cliffdict = LoadCliff(oFilename, reportdate);
                    /*  var dbentity = new EXANTE_Entities(_currentConnection);
                      var testdate = reportdate.ToShortDateString();
                      var cpidfromDb = from cp in dbentity.DailyChecks
                                       where cp.Table == "FT" && cp.date.ToString() == testdate
                                       select cp.status;*/
                    List<string> rowlist;
                    DateTime TimeUpdateBalanceStart = DateTime.Now;
                    LogTextBox.AppendText("\r\n" + TimeUpdateBalanceStart + ": " + "start FT parsing reconciliation");
                    if (cliffdict.TryGetValue("600", out rowlist))
                    {
                        reportdate = getcashmovements(rowlist);
                    }
                    DateTime TimeFutureParsing = DateTime.Now;
                    LogTextBox.AppendText("\r\n" + TimeFutureParsing.ToLongTimeString() + ": " +
                                          "FT parsing completed for " + reportdate.ToShortDateString() + ". Time:" +
                                          (TimeFutureParsing - TimeUpdateBalanceStart).ToString() + "s");
                }
            }
        }

        private DateTime getcashmovements(List<string> rowlist)
        {
            var dbentity = new EXANTE_Entities(_currentConnection);
            var listforDb = new List<FT>();
            var reportdate =  DateTime.ParseExact(rowlist[0].Substring(6, 8), "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture);
            var bomap = getMap("ABN");
            Map symbolvalue;
            foreach (var row in rowlist)
            {
                var symbol = row.Substring(62, 6).Trim();
                var symbol2 = row.Substring(106, 4).Trim();
          /*      if (Convert.ToInt64(row.Substring(135, 9).Trim()) == 587856)
                {
                    var t = 1;
                }*/
                var type = row.Substring(60, 2).Trim();
                var bosymbol="";
                if (bomap.TryGetValue(symbol+type, out symbolvalue))
                {
                    bosymbol = symbolvalue.BOSymbol;
                }
               dbentity.FTs.Add(new FT
                    {
                        cp = row.Substring(54, 6).TrimEnd(),
                        brocker = "ABN",
                        ReportDate =  DateTime.ParseExact(row.Substring(6, 8), "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture),
                        account_id = null,
                        timestamp =  DateTime.Now,
                        symbol = symbol,
                        ccy = row.Substring(68, 3).Trim(),
                        value = row[105] != 'C'
                                    ? -1 * Convert.ToDouble(row.Substring(87, 18))/100
                                    : Convert.ToDouble(row.Substring(87, 18))/100,
                        valid = 1,
                        Type = type,
                        User = "parser",
                        Comment = row.Substring(111, 24).TrimEnd(' '),
                        Reference =Convert.ToInt64(row.Substring(135, 9).Trim()),
                        ValueDate = DateTime.ParseExact(row.Substring(79, 8), "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture),
                        TradeDate = DateTime.ParseExact(row.Substring(71, 8), "yyyyMMdd", System.Globalization.CultureInfo.InvariantCulture),
                        BOSymbol = bosymbol,
                        GrossPositionIndicator = row.Substring(110, 1),
                        JOURNALACCOUNTCODE = row.Substring(106, 4)
                    });
            }
            dbentity.SaveChanges();
            return reportdate;

        }

        private void CheckConnection()
        {
            LogTextBox.AppendText("\r\n" + "Checking connection");

            var testexample = new EXANTE_Entities(_currentConnection);
            var cptradefromDb = from Contr in testexample.Contracts
                                where Contr.valid == 1
                                select Contr;
            var test = cptradefromDb.ToList();
            LogTextBox.AppendText("\r\n" + "Good connection with " + _currentConnection);
        }

        private void comboBoxEnviroment_TextChanged(object sender, EventArgs e)
        {
            _currentConnection = comboBoxEnviroment.Text;
        }

        private void button6_Click(object sender, EventArgs e)
        {
            TradesParserStatus.Text = "Processing";
            DateTime TimeStart = DateTime.Now;
            LogTextBox.AppendText(TimeStart + ": " + "Getting ccy prices from MOEX");
            var FORTSDate = ABNDate.Value.ToString("dd.MM.yyyy");
            updateFORTSccyrates(FORTSDate);
            DateTime TimeEndUpdating = DateTime.Now;
            LogTextBox.AppendText("\r\n" + TimeEndUpdating + ": " + "CCY FORTS rates for " + FORTSDate + " uploaded. Time:" + (TimeEndUpdating - TimeStart).ToString());
            
            calcualteVM(ABNDate.Value);
            DateTime TimeEndVMCalculation = DateTime.Now;
            LogTextBox.AppendText("\r\n" + TimeEndVMCalculation + ": " + "VM calculation " + FORTSDate + " completed. Time:" + (TimeEndVMCalculation-TimeEndUpdating).ToString());
            
            
          //  UpdateFortsPrices(ABNDate.Value);
            //DateTime TimeEndUpdating2 = DateTime.Now;
            //LogTextBox.AppendText("\r\n" + TimeEndUpdating + ": " + "FORTS EOD prices for " + FORTSDate + " uploaded. Time:" + (TimeEndUpdating2 - TimeEndUpdating).ToString());
            
         //   calcualteVM(ABNDate.Value);
        }

        private void calcualteVM(DateTime value)
        {
            var listofaccountpositions = Getlistofaccountposition(value);
            listofaccountpositions = udpateVMforaccount(listofaccountpositions, value);
            var t = 1;
        }

        private List<FullTrade> udpateVMforaccount(List<FullTrade> listofaccountpositions, DateTime VMDate)
        {
            var i = 0;
            var db = new EXANTE_Entities(_currentConnection);
            while (i < listofaccountpositions.Count)
            {
                var fullTrade = listofaccountpositions[i];
                double valueccy = 0;
                if (fullTrade.Value == 0)
                {
                    var currentAtomOfVM = getatomofVM(fullTrade.Symbol, VMDate);
                    var priceFromDb = GetPrice(VMDate, fullTrade.Symbol);
                    var closeAtomOfVM = Math.Round(Math.Round(currentAtomOfVM * priceFromDb,5), 2, MidpointRounding.AwayFromZero);
                    fullTrade.Value = Math.Round( Math.Round(fullTrade.Qty * (closeAtomOfVM - Math.Round(Math.Round(currentAtomOfVM * fullTrade.Price,5), 2, MidpointRounding.AwayFromZero)),5), 2, MidpointRounding.AwayFromZero);
                    var j = i + 1;
                    
                    while (j < listofaccountpositions.Count)
                    {
                        if ((listofaccountpositions[j].Value == 0) && (listofaccountpositions[j].Symbol==fullTrade.Symbol))
                        {
                            var t0 = currentAtomOfVM * listofaccountpositions[j].Price;
                            var t1 = Math.Round(currentAtomOfVM * listofaccountpositions[j].Price, 2, MidpointRounding.AwayFromZero);
                            var t2 = closeAtomOfVM - t1;
                            var t3 = listofaccountpositions[j].Qty * t2;
                            var t4 = Math.Round(t3,2);



                            listofaccountpositions[j].Value = Math.Round(Math.Round(listofaccountpositions[j].Qty * Math.Round(Math.Round((closeAtomOfVM - Math.Round(Math.Round(currentAtomOfVM * listofaccountpositions[j].Price, 5), 2, MidpointRounding.AwayFromZero)), 5), 2, MidpointRounding.AwayFromZero), 5), 2, MidpointRounding.AwayFromZero);
                        }
                        j++;
                    }
                }
                i++;
                valueccy = GetValueccy(VMDate, fullTrade.Symbol);
                 db.FTs.Add(new FT
                    {
                        cp = "OPEN",
                        brocker = "OPEN",
                        ReportDate = VMDate,
                        account_id = fullTrade.Account,
                        timestamp =  DateTime.Now,
                        symbol = fullTrade.Symbol,
                        ccy = "RUB",
                        value = fullTrade.Value,
                        valid = 1,
                        Type = "VM",
                        User = "parser",
                        Comment = " ",
                        Reference =null,
                        ValueDate = VMDate,
                        TradeDate = VMDate,
                        BOSymbol = fullTrade.Symbol,
                        GrossPositionIndicator = null,
                        JOURNALACCOUNTCODE = null,
                        ValueCCY = -Math.Round(fullTrade.Value * valueccy,2, MidpointRounding.AwayFromZero)
                    });
            }
          //  db.SaveChanges();
            try
            {
                // Your code...
                // Could also be before try if you know the exception occurs in SaveChanges

                db.SaveChanges();
            }
            catch (DbEntityValidationException e)
            {
                foreach (var eve in e.EntityValidationErrors)
                {
                    Console.WriteLine("Entity of type \"{0}\" in state \"{1}\" has the following validation errors:",
                        eve.Entry.Entity.GetType().Name, eve.Entry.State);
                    foreach (var ve in eve.ValidationErrors)
                    {
                        Console.WriteLine("- Property: \"{0}\", Error: \"{1}\"",
                            ve.PropertyName, ve.ErrorMessage);
                    }
                }
                throw;
            }

            return listofaccountpositions;
        }

        private static double GetValueccy(DateTime VMDate, string symbol)
        {
            var db = new EXANTE_Entities(_currentConnection); 

             var indexofOption = CustomIndexOf(symbol, '.', 3); 
               var key = "";
                if (indexofOption > 0)
                {
                    key = symbol.Substring(0, indexofOption);
                }
                else key = symbol;
     



            var map =
                (from ct in db.Mappings
                 where ct.valid == 1 && ct.Brocker == "OPEN" && ct.Type == "FORTS" && ct.BOSymbol.Contains(key)
                 select ct.Round).ToList();
            if ((map.Count > 0)&&(map[0]==1))
            {
                var ccyrateFromDblinq =
                    (from ct in db.Prices
                     where
                         ct.Valid == 1 && ct.Type == "FORTS" && ct.Ticker.Contains("USDRUB") &&
                         ct.Date == VMDate.Date
                     select ct.Price1).ToList()[0];
                db.Dispose();
                return (double)(1 / ccyrateFromDblinq);
            }
            else
            {
                db.Dispose();
                return 0;
            }
        }

        private double GetPrice(DateTime VMDate, string symbol)
        {
            var db = new EXANTE_Entities(_currentConnection);
            var pricelinq = from ct in db.Prices
                    where ct.Valid == 1 && ct.Type == "FORTS" && ct.Ticker.Contains(symbol) && ct.Date == VMDate.Date
                    select ct;           
            if (pricelinq.Any())
            {
                var returnvalue = (double)pricelinq.ToList()[0].Price1;
                db.Dispose();
                return returnvalue;
            }
            else
            {
                return UpdateFortsPrices(VMDate, symbol);
            }
        }

        private double getatomofVM(string symbol,DateTime VMDate )
        {
            var db = new EXANTE_Entities(_currentConnection);
            double atomvalue = 0;
            var indexofOption = CustomIndexOf(symbol, '.', 3);
            var key = symbol;
            if (indexofOption > 0)
            {
                key = symbol.Substring(0, indexofOption);
            }
            var map =
                (from ct in db.Mappings
                 where ct.valid == 1 && ct.Brocker == "OPEN" && ct.Type == "FORTS" && ct.BOSymbol.Contains(key)
                select ct).ToList();
            if (map.Count==1)
            {
               atomvalue = (double) (map[0].MtyPrice/map[0].MtyVolume);
               if (map[0].Round == 1)
               {
                    var ccyrateFromDblinq =
                                    (from ct in db.Prices
                                     where ct.Valid == 1 && ct.Type == "FORTS" && ct.Ticker.Contains("USDRUB") && ct.Date == VMDate.Date
                                     select ct);
                   double ccyrateFromDb = 0;
                    if (!ccyrateFromDblinq.Any())
                    {
                        updateFORTSccyrates(VMDate.ToString("dd.MM.yyyy"));
                        ccyrateFromDb =
                                    (double) (from ct in db.Prices
                                              where ct.Valid == 1 && ct.Type == "FORTS" && ct.Ticker.Contains("USDRUB") && ct.Date == VMDate.Date
                                              select ct).ToList()[0].Price1;
                    }
                    else
                    {
                        ccyrateFromDb = (double) ccyrateFromDblinq.ToList()[0].Price1;
                    }
                    atomvalue = Math.Round((atomvalue*ccyrateFromDb),5, MidpointRounding.AwayFromZero);
                }
            }
            db.Dispose();
            return atomvalue;
        }

        private List<FullTrade> Getlistofaccountposition(DateTime fortsDate)
        {
            var db = new EXANTE_Entities(_currentConnection);

            var nextdate = fortsDate.AddDays(1);
            var positionbefore =
                from ct in db.Ctrades
                where
                    ct.valid == 1 && ct.Date < fortsDate.Date && ct.symbol_id.Contains("FORTS") && ct.cp_id == "OPEN"
                group ct by new
                    {
                        ct.account_id,
                        ct.symbol_id
                    }
                    into g
                    where g.Sum(x => x.qty) != 0
                    select new FullTrade { Account = g.Key.account_id, Symbol = g.Key.symbol_id, Qty = (double)g.Sum(x => x.qty), Price = 0, Value = 0 };
          //      var listofTrades = positionbefore.ToList();
            var listofTrades = new List<FullTrade>(positionbefore.ToList());
            foreach (FullTrade listofTrade in listofTrades)
            {
                listofTrade.Price = GetFortsPrices(fortsDate, listofTrade.Symbol);
            }

             var tradesToday =
                from ct in db.Ctrades
                where
                    ct.valid == 1 && ct.Date < nextdate.Date && ct.Date >= fortsDate.Date && ct.symbol_id.Contains("FORTS") && ct.cp_id == "OPEN"
               select new FullTrade { Account = ct.account_id, Symbol = ct.symbol_id, Qty =(double) ct.qty, Price = (double) ct.price, Value = 0};
            listofTrades.AddRange(tradesToday.ToList());
            db.Dispose();
            return listofTrades;
          
        }

        private double GetFortsPrices(DateTime fortsDate, string symbol)
        {
            var db = new EXANTE_Entities(_currentConnection);

            var lastprice =
                from ct in db.Prices
                where ct.Valid == 1 && ct.Date < fortsDate.Date && ct.Ticker == symbol
                orderby ct.Date descending
                select ct.Price1;
            if (!lastprice.Any())
            {
                LogTextBox.AppendText("\r\n" + "There is no prices for " + ": " + symbol + ". VM can be incorrect!");
                return 0;
            }
            else
            {
                return (double) lastprice.ToList()[0];
            }
        }

        public static int CustomIndexOf(string source, char toFind, int position)
        {
            int index = -1;
            for (int i = 0; i < position; i++)
            {
                index = source.IndexOf(toFind, index + 1);

                if (index == -1)
                    break;
            }

            return index;
        }

        private double UpdateFortsPrices(DateTime fortsDate, string currentInstrument)
        {
            const string initialstring = "http://moex.com/ru/derivatives/contractresults.aspx?code=";
          //  var listCurrentInstruments = getFORTSinstrument(fortsDate);
            var db = new EXANTE_Entities(_currentConnection);
            var map = getSymbolMap("OPEN");
            var list = new List<string>();
            list.Add("><tr valign=top class=tr0><td>");
            list.Add("><td align='right' nowrap>");
            list.Add("><tr valign=top class=tr1><td>");
            list.Add("\xa0");
            list.Add("\r");
            list.Add("\n");
            list.Add("><tr class=tr1 align=right><td>");
            list.Add("><tr class=tr0 align=right><td>");
            double pricefw = 0;
              Map symbolvalue;
            //  var indexofOption = currentInstrument.IndexOf("FORTS")+11;
              var indexofOption = CustomIndexOf(currentInstrument, '.', 3); 
                var key = "";
                if (indexofOption > 0)
                {
                    key = currentInstrument.Substring(0, indexofOption);
                }
                else key = currentInstrument;
            if (!map.TryGetValue(key, out symbolvalue))
            {
                LogTextBox.AppendText("\r\n" + "New Symbol: " + key);
            }
            else{
                var mappingsymbol = symbolvalue.BOSymbol;
                var vd = (DateTime) symbolvalue.ValueDate;
                if (indexofOption > 0)
                {
                    mappingsymbol = mappingsymbol + currentInstrument[indexofOption + 1] + "A " + currentInstrument.Substring(indexofOption + 2);
                        //+ "M" + vd.ToString("ddMMyy") + currentInstrument[indexofOption + 1] +"A " + currentInstrument.Substring(indexofOption + 2);
                }
                var webpage = GetPage(initialstring + mappingsymbol, "/tr", "</td", list);
                pricefw = getpricefromhtml(webpage, fortsDate);
                if (pricefw != -1)
                {
                    db.Prices.Add(new Price
                        {
                            Ticker = currentInstrument,
                            Tenor = vd,
                            Price1 = pricefw,
                            Date = fortsDate,
                            Type = "FORTS",
                            Timestamp = DateTime.Now,
                            Valid = 1,
                            Username = "parser"
                        });
                }

                db.SaveChanges();
            }
            return pricefw;
        }

        private double getpricefromhtml(List<List<string>> pagelist, DateTime fortsDate)
        {
            var index = 1;
            var Datestring = fortsDate.ToString("dd.MM.yyyy");
            while ((index < pagelist.Count) && (pagelist[index].Count<4||pagelist[index][3].IndexOf("CSV") == -1)) index++;
            index++;

            while ((index < pagelist.Count()) && (pagelist[index][0].IndexOf(Datestring) == -1)) index++;
            var temp = "";
            if (index < pagelist.Count())
            {
                temp = pagelist[index][2].Replace(',', '.');
                temp = temp.Replace("<td>", "");
                temp = temp.Replace(">", "");
                temp = temp.Replace(" ", "");
                temp = temp.Replace("В", "");
            }
            if (temp != "")
            {
                if(temp=="<tdalign='right'-"){
                    return 0;
                }
                else {
                  return Convert.ToDouble(temp);
                }
            }
            else return -1;
        }

        private List<string> getFORTSinstrument(DateTime fortsDate)
        {
            var db = new EXANTE_Entities(_currentConnection);
            var nextdate = fortsDate.AddDays(1);
            var contractrow =
                      from ct in db.Ctrades
                      where ct.valid == 1 && ct.Date >= fortsDate.Date && ct.Date < (nextdate.Date) && ct.symbol_id.Contains(".FORTS.") 
                      select  ct.symbol_id;
            return contractrow.Distinct().ToList();
        }

        private void updateFORTSccyrates(string Date) {
            const string initialstring = "http://moex.com/ru/derivatives/currency-rate.aspx?currency=";
            var listccy = new List<string>();
            listccy.Add("USD_RUB");
            listccy.Add("EUR_RUB");
            var pricefordb = new List<Price>();
            var testexample = new EXANTE_Entities(_currentConnection);
            foreach (string ccy in listccy)
            {
              var ccystring = initialstring + ccy;
              var list = new List<string>();
              list.Add("><tr valign=top class=tr0><td>");
              list.Add("><td align='right' nowrap>");
              list.Add("><tr valign=top class=tr1><td>");
              list.Add("\xa0");
              list.Add("\r");
              list.Add("\n");
              list.Add("><tr class=tr1 align=right><td>");
              list.Add("><tr class=tr0 align=right><td>");
              var currate = GetPage(ccystring, "/tr", "</td", list);
              var index = 1;
              while ((index < currate.Count) && (currate[index][0].IndexOf("18:30)<")==-1)) index++;
              index++;
                if (Date != "")
                {
                    while ((index < currate.Count()) && (currate[index][0].IndexOf(Date) == -1)) index++;
                }
                else Date = currate[index][0].Substring(currate[index][0].Length -10);
              var temp = "";
              if (index != currate.Count() )
              {
                temp = currate[index][2].Replace(',', '.');
                temp = temp.Replace("<td>", "");
                temp = temp.Replace(">", "");
                temp = temp.Replace(" ", "");
              }
                
              testexample.Prices.Add(new Price{
                  Ticker = ccy.Replace("_", ""),
                  Tenor =DateTime.ParseExact(Date, "dd.MM.yyyy", System.Globalization.CultureInfo.InvariantCulture),
                  Price1=Convert.ToDouble(temp),
                  Date = DateTime.ParseExact(Date, "dd.MM.yyyy", System.Globalization.CultureInfo.InvariantCulture),
                  Type="FORTS",
                  Timestamp = DateTime.Now,
                  Valid=1,
                  Username="parser"
             });   
            }
            try
            {
                testexample.SaveChanges();
            }
            catch (DbEntityValidationException dbEx)
            {
                foreach (var validationErrors in dbEx.EntityValidationErrors)
                {
                    foreach (var validationError in validationErrors.ValidationErrors)
                    {
                        Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName, validationError.ErrorMessage);
                    }
                }
            }
            testexample.Dispose();
        //    return Convert.ToDouble(temp);
        }
        private void updatePrices()
        {
            //        using System.Net;
            var initialstring = "http://moex.com/ru/derivatives/currency-rate.aspx";
            GetHtmlPage(initialstring);
            var forwardstring = "http://moex.com/ru/derivatives/contractresults.aspx?code=";// s+mapping[j][1],'/tr','</td',list);
            var list = new List<string>();
              list.Add("><tr valign=top class=tr0><td>");
              list.Add("><td align='right' nowrap>");
              list.Add("><tr valign=top class=tr1><td>");
              list.Add("\xa0");
              list.Add("\r");
              list.Add("\n");
              list.Add("><tr class=tr1 align=right><td>");
              list.Add("><tr class=tr0 align=right><td>");
            var currate = GetPage(initialstring,"/tr","</td",list);
            var index = 15;
          //  while ((index < currate.Count()) && (currate[index][0].IndexOf("Курс основного") == -1)) index++;
            while ((index < currate.Count()) && (currate[index][0].IndexOf("18.08.2014") == -1)) index++;
            var temp = "";
            if (index != currate.Count() + 1)
            {
                temp = currate[index][2].Replace(',', '.');
                temp = temp.Replace("<td>", "");
                temp = temp.Replace(">", "");
                temp = temp.Replace(" ", "");

            }
            var t = 1;
        }
        
        private static void GetHtmlPage (string url){
            HtmlWeb web = new HtmlWeb();
            HtmlAgilityPack.HtmlDocument doc = web.Load("http://moex.com/ru/derivatives/currency-rate.aspx");
            HtmlNodeCollection tags = doc.DocumentNode.SelectNodes("//abc//tag");


        //  var html = new HtmlDocument();
        //  html.
          // LoadHtml(wClient.DownloadString(url));
 /*foreach(HtmlNode link in doc.DocumentElement.SelectNodes("//a[@href")
 {
    HtmlAttribute att = link["href"];
    att.Value = FixLink(att);
 }*/
            var t = 1;
        }
        /*
    static void GetJobLinks(HtmlDocument html)
{
    var trNodes = html.GetElementbyId(«job-items»).ChildNodes.Where(x => x.Name == «tr»);
 
    foreach (var item in trNodes)
    {
        var tdNodes = item.ChildNodes.Where(x => x.Name == «td»).ToArray();
        if (tdNodes.Count() != 0)
        {
            var location = tdNodes[2].ChildNodes.Where(x => x.Name == «a»).ToArray();
 
            jobList.Add(new HabraJob()
            {
                Url = tdNodes[0].ChildNodes.First().Attributes[«href»].Value,
                Title = tdNodes[0].FirstChild.InnerText,
                Price = tdNodes[1].FirstChild.InnerText,
                Country = location[0].InnerText,
                Region = location[2].InnerText,
                City = location[2].InnerText
            });
        }
 
    }
 
}
*/



        private static List<List<string>> GetPage(string page, string rowsplitter,  string cellsplitter,List<string> unusefulltags)
        {
            string htmlCode;
            using (WebClient client = new WebClient())
            {
                htmlCode = client.DownloadString(page);
            }

           // var strArray = htmlCode.Split(rowsplitter);
            var strArray = htmlCode.Split(new[] { rowsplitter }, StringSplitOptions.None);
          //  return str.Split(new[] { splitter }, StringSplitOptions.None);
            var result = new List<List<string>>();
        //    string[,] result = new string[,] {};
          string row = null;
            for (var i = 0; i < strArray.Count(); i++)
            {
                row = strArray[i];
                var lastlength = 0;
                while (lastlength != row.Count())
                {
                    lastlength = row.Count();
                    for (var index = 0; index < unusefulltags.Count(); index++)
                    {
                        row = row.Replace(unusefulltags[index], "");
                    }
                }
               // var rowlist = row.Split(cellsplitter);
                var rowlist = row.Split(new[] { cellsplitter }, StringSplitOptions.None);
             
                result.Add(new List<string>(rowlist));
            }
            return result;  
        }

        private void button7_Click(object sender, EventArgs e)
        {
            DateTime repordate = ABNDate.Value; //todo Get report date from xml Processing date
            TradesParserStatus.Text = "Processing";
            DateTime TimeStart = DateTime.Now;
            LogTextBox.AppendText("\r\n" + TimeStart.ToLongTimeString() + ": " + "start Mac trades uploading");
              
            if (!noparsingCheckbox.Checked)
            {
                repordate = MacTradeUploading();
            }

            var db = new EXANTE_Entities(_currentConnection);
            var cptradefromDb = from cptrade in db.CpTrades
                                where
                                    cptrade.valid == 1 && cptrade.BrokerId == "Mac" &&
                                    cptrade.ReportDate >= repordate.Date && cptrade.ReportDate <= (repordate.Date)&&cptrade.BOTradeNumber==null
                                select cptrade;
            var cptradelist = cptradefromDb.ToList();
             if (noparsingCheckbox.Checked){
                 var symbolmap = getMapping("Mac");
                 var contractrow =
                        from ct in db.Contracts
                        where ct.valid == 1
                        select ct;
                 var contractdetails = contractrow.ToDictionary(k => k.id, k => k);
                 foreach (CpTrade cpTrade in cptradelist){
                     if (cpTrade.BOSymbol == null){
                         Map symbolvalue;
                         if (symbolmap.TryGetValue(cpTrade.Symbol, out symbolvalue))
                         {
                             var key = symbolvalue.BOSymbol + "." + getLetterOfMonth(cpTrade.ValueDate.Value.Month) + cpTrade.ValueDate.Value.Year;
                             Contract mapContract;
                             cpTrade.Price = cpTrade.Price * symbolvalue.MtyPrice;
                             cpTrade.value = -cpTrade.Price*cpTrade.Qty*symbolvalue.Leverage;
                             cpTrade.Qty = cpTrade.Qty*symbolvalue.MtyVolume;
                             if (contractdetails.TryGetValue(key, out mapContract))
                             {
                                 cpTrade.ValueDate = mapContract.ValueDate;
                                 cpTrade.BOSymbol = key;
                             }
                             else
                             {
                                 LogTextBox.AppendText("\r\n" + "Mac: No Map in Contracts for " + key);
                             }
                         }
                         db.CpTrades.Attach(cpTrade);
                         db.Entry(cpTrade).State = (System.Data.Entity.EntityState)EntityState.Modified;
                         db.SaveChanges();
                     }
                 }
             }

        
            MacRecon(repordate, cptradelist);
            TradesParserStatus.Text = "Done";
            DateTime TimeEnd = DateTime.Now;
            LogTextBox.AppendText("\r\n" + TimeEnd.ToLongTimeString() + ": " + "Mac trades  completed." +
                                  (TimeEnd - TimeStart).ToString());
               
            Console.WriteLine(""); // <-- For debugging use. */
        }

       

        private DateTime MacTradeUploading()
        {
            DialogResult result = openFileDialog2.ShowDialog();
            var idSymbol = 6;
            var idMacside = 11;
            var idReportDate = 0;
            var idAccount = 1;
            var idcurrency = 4;
            var idTradeDate = 10;
            var idqty = 12;
            var idcp = 19;
            var idSellprice = 15;
            var idBuyPrice = 13;
            var idTypeofTrade = 8;
            var iddeliverydate = 7;
            var idcat = 5;
            var idexchfees = 24;
            var idfees = 23;
            var idoftrade = 32;
            var symbolmap = getMapping("Mac");
            var idTypeofOption =9;
            var idstrike = 20;
            if (result == DialogResult.OK) // Test result.
            {
                var db = new EXANTE_Entities(_currentConnection);
                var cpfromDb = from cp in db.counterparties
                               select cp;
                var cpdic = cpfromDb.ToDictionary(k => k.Name, k => k.cp_id);
                var reader = new StreamReader(openFileDialog2.FileName);
                var allfromfile = new List<CpTrade>();

                var lineFromFile = reader.ReadLine();
                Map symbolvalue;
                DateTime reportdate = new DateTime();
                if (lineFromFile != null)
                {
                    var rowstring = lineFromFile.Replace("\"", "").Split(Delimiter);
                    var contractrow =
                        from ct in db.Contracts
                        where ct.valid == 1
                        select ct;
                    var contractdetails = contractrow.ToDictionary(k => k.id, k => k);
                    while (!reader.EndOfStream)
                    {
                        lineFromFile = reader.ReadLine();
                        double? MtyVolume = 1;
                        double? MtyPrice = 1;
                        string BoSymbol = null;
                        double? Leverage = 1;
                        int round = 10;

                        if (lineFromFile == null) continue;
                        rowstring = lineFromFile.Replace("\"", "").Split(CSVDelimeter);
                        DateTime? valuedate = null;
                        Contract mapContract;

                        var side = 1;
                        double price = 0;
                        var symbol_id = rowstring[idSymbol].TrimEnd();
                        var deliveryDate = DateTime.ParseExact(rowstring[iddeliverydate], "yyMM",
                                                               CultureInfo.CurrentCulture);
                        if (symbolmap.TryGetValue(symbol_id, out symbolvalue))
                        {
                            MtyVolume = symbolvalue.MtyVolume;
                            MtyPrice = symbolvalue.MtyPrice;
                            BoSymbol = symbolvalue.BOSymbol;
                            round = (int) symbolvalue.Round;
                            var key = BoSymbol + "." + getLetterOfMonth(deliveryDate.Month) + deliveryDate.Year;
                            if (contractdetails.TryGetValue(key, out mapContract))
                            {
                                valuedate = mapContract.ValueDate;
                                Leverage = mapContract.Leverage;
                                BoSymbol = key;
                            }
                            else
                            {
                                valuedate = deliveryDate;
                                LogTextBox.AppendText("\r\n" + "Mac: No Map in Contracts for " + key);
                            }
                        }
                        else
                        {
                            LogTextBox.AppendText("\r\n" + "Mac: No Map in Mapping table for " + symbol_id);
                        }

                        if (rowstring[idMacside] == "S")
                        {
                            side = -1;
                            price =
                                (double) (double.Parse(rowstring[idSellprice], CultureInfo.InvariantCulture)*MtyPrice);
                        }
                        else
                        {
                            price =
                                (double) (double.Parse(rowstring[idBuyPrice], CultureInfo.InvariantCulture)*MtyPrice);
                        }
                        reportdate = Convert.ToDateTime(rowstring[idReportDate]);
                        var account_id = rowstring[idAccount].TrimEnd();

                        var ccy = rowstring[idcurrency].TrimEnd();
                        var TradeDate = Convert.ToDateTime(rowstring[idTradeDate]);
                        var qty = rowstring[idqty].IndexOf(".") == -1
                                      ? Convert.ToInt64(rowstring[idqty])*side*MtyVolume
                                      : double.Parse(rowstring[idqty], CultureInfo.InvariantCulture)*side*MtyVolume;
                        var cp_id = getCPid(rowstring[idcp].Trim(), cpdic);
                        var typeoftrade = rowstring[idTypeofTrade].TrimEnd();
                        var category = rowstring[idcat];

                        var exchFees = double.Parse(rowstring[idexchfees], CultureInfo.InvariantCulture);
                        var Fees = double.Parse(rowstring[idfees], CultureInfo.InvariantCulture);
                        var exchangeOrderId = rowstring[idoftrade].TrimEnd();
                        if (typeoftrade=="O")
                        {
                            BoSymbol = BoSymbol + "." + rowstring[idTypeofOption].Trim() +double.Parse(rowstring[idstrike], CultureInfo.InvariantCulture).ToString().Replace(".","_");
                        }
                        allfromfile.Add(new CpTrade
                            {
                                ReportDate = reportdate,
                                TradeDate = TradeDate,
                                BrokerId = "Mac",
                                Symbol = symbol_id,
                                Type = typeoftrade,
                                Qty = qty,
                                Price = price,
                                ValueDate = valuedate,
                                cp_id = cp_id,
                                ExchangeFees = exchFees,
                                Fee = Fees,
                                Id = null,
                                BOSymbol = BoSymbol,
                                BOTradeNumber = null,
                                value = Math.Round( Math.Round((double) (-price*qty*Leverage),5), 2, MidpointRounding.AwayFromZero),
                                Timestamp = DateTime.UtcNow,
                                valid = 1,
                                username = "parser",
                                //  FullId = null,
                                BOcp = null,
                                exchangeOrderId = exchangeOrderId,
                                TypeOfTrade = category,
                                Comment = account_id,
                                ExchFeeCcy = ccy,
                                ClearingFeeCcy = ccy,
                                ccy = ccy
                            });
                    }
                }

                TradesParserStatus.Text = "DB updating";

                foreach (CpTrade tradeIndex in allfromfile)
                {
                    db.CpTrades.Add(tradeIndex);
                }

                try
                {
                    db.SaveChanges();
                }
                catch (DbEntityValidationException dbEx)
                {
                    foreach (var validationErrors in dbEx.EntityValidationErrors)
                    {
                        foreach (var validationError in validationErrors.ValidationErrors)
                        {
                            Trace.TraceInformation("Property: {0} Error: {1}", validationError.PropertyName,
                                                   validationError.ErrorMessage);
                        }
                    }
                }
                return reportdate;
            }
            else return new DateTime(2011, 01, 01);
        }
    }

    internal class Trade
    {
        public double qty { get; set; }
        public long id { get; set; }
    }

    internal class FullTrade
    {
        public string Account { get; set; }
        public string Symbol { get; set; }
        public double Qty { get; set; }
        public double Price { get; set; }
        public double Value { get; set; }
    }
}
